<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Ragflow0.20.4(retrival)</title>
    <link href="/2025/09/18/%E6%A3%80%E7%B4%A2%E7%BB%84%E4%BB%B60.20.4/"/>
    <url>/2025/09/18/%E6%A3%80%E7%B4%A2%E7%BB%84%E4%BB%B60.20.4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RetrievalParam</span>(<span class="hljs-title class_ inherited__">ToolParamBase</span>):    <span class="hljs-comment"># 继承自公共参数基类</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Define the Retrieval component parameters.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.meta:ToolMeta = &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;search_my_dateset&quot;</span>,<br>            <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;This tool can be utilized for relevant content searching in the datasets.&quot;</span>,<br>            <span class="hljs-string">&quot;parameters&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>                    <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;The keywords to search the dataset. The keywords should be the most important words/terms(includes synonyms) from the original request.&quot;</span>,<br>                    <span class="hljs-string">&quot;default&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>                    <span class="hljs-string">&quot;required&quot;</span>: <span class="hljs-literal">True</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <span class="hljs-variable language_">self</span>.similarity_threshold = <span class="hljs-number">0.2</span>        <span class="hljs-comment"># 向量相似度低于 0.2 的块不要</span><br>        <span class="hljs-variable language_">self</span>.keywords_similarity_weight = <span class="hljs-number">0.5</span>  <span class="hljs-comment"># 关键词匹配得分占 50%，向量得分占 50%</span><br>        <span class="hljs-variable language_">self</span>.top_n = <span class="hljs-number">8</span>                         <span class="hljs-comment"># 最终返回 8 个文本块</span><br>        <span class="hljs-variable language_">self</span>.top_k = <span class="hljs-number">1024</span>                      <span class="hljs-comment"># 向量索引阶段先粗筛 1024 个，再精排</span><br>        <span class="hljs-variable language_">self</span>.kb_ids = []                       <span class="hljs-comment"># 允许指定多个知识库 ID</span><br>        <span class="hljs-variable language_">self</span>.kb_vars = []                      <span class="hljs-comment"># 也可以用变量名动态指代知识库</span><br>        <span class="hljs-variable language_">self</span>.rerank_id = <span class="hljs-string">&quot;&quot;</span>                    <span class="hljs-comment"># 指定一个“重排序”模型 ID（可选）</span><br>        <span class="hljs-variable language_">self</span>.empty_response = <span class="hljs-string">&quot;&quot;</span>               <span class="hljs-comment"># 啥也没搜到时的兜底文案</span><br>        <span class="hljs-variable language_">self</span>.use_kg = <span class="hljs-literal">False</span>                    <span class="hljs-comment"># 是否同时用知识图谱召回</span><br>        <span class="hljs-variable language_">self</span>.cross_languages = []              <span class="hljs-comment"># 跨语言检索配置</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">self</span>):     <span class="hljs-comment"># 参数合法性自检</span><br>        <span class="hljs-variable language_">self</span>.check_decimal_float(<span class="hljs-variable language_">self</span>.similarity_threshold, <span class="hljs-string">&quot;[Retrieval] Similarity threshold&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.check_decimal_float(<span class="hljs-variable language_">self</span>.keywords_similarity_weight, <span class="hljs-string">&quot;[Retrieval] Keyword similarity weight&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.check_positive_number(<span class="hljs-variable language_">self</span>.top_n, <span class="hljs-string">&quot;[Retrieval] Top N&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_input_form</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">dict</span>]:    <span class="hljs-comment"># 告诉前端“我只需要一个单行文本框”</span><br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Query&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;line&quot;</span><br>            &#125;<br>        &#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Retrieval</span>(ToolBase, ABC):<br>    component_name = <span class="hljs-string">&quot;Retrieval&quot;</span><br><br><span class="hljs-meta">    @timeout(<span class="hljs-params">os.environ.get(<span class="hljs-params"><span class="hljs-string">&quot;COMPONENT_EXEC_TIMEOUT&quot;</span>, <span class="hljs-number">12</span></span>)</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_invoke</span>(<span class="hljs-params">self, **kwargs</span>):    <span class="hljs-comment"># 被框架回调的入口，最多跑 12 秒</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> kwargs.get(<span class="hljs-string">&quot;query&quot;</span>):<br>            <span class="hljs-variable language_">self</span>.set_output(<span class="hljs-string">&quot;formalized_content&quot;</span>, <span class="hljs-variable language_">self</span>._param.empty_response)<br><br>        kb_ids: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">str</span>] = []<br>        <span class="hljs-keyword">for</span> <span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>._param.kb_ids:    <span class="hljs-comment"># 支持“硬编码 ID”或“变量名@变量”</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">id</span>.find(<span class="hljs-string">&quot;@&quot;</span>) &lt; <span class="hljs-number">0</span>:<br>                kb_ids.append(<span class="hljs-built_in">id</span>)<br>                <span class="hljs-keyword">continue</span><br>            kb_nm = <span class="hljs-variable language_">self</span>._canvas.get_variable_value(<span class="hljs-built_in">id</span>)<br>            <span class="hljs-comment"># if kb_nm is a list</span><br>            kb_nm_list = kb_nm <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(kb_nm, <span class="hljs-built_in">list</span>) <span class="hljs-keyword">else</span> [kb_nm]<br>            <span class="hljs-keyword">for</span> nm_or_id <span class="hljs-keyword">in</span> kb_nm_list:<br>                e, kb = KnowledgebaseService.get_by_name(nm_or_id,<br>                                                         <span class="hljs-variable language_">self</span>._canvas._tenant_id)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> e:<br>                    e, kb = KnowledgebaseService.get_by_id(nm_or_id)<br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> e:<br>                        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">f&quot;Dataset(<span class="hljs-subst">&#123;nm_or_id&#125;</span>) does not exist.&quot;</span>)<br>                kb_ids.append(kb.<span class="hljs-built_in">id</span>)<br><br>        filtered_kb_ids: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>([kb_id <span class="hljs-keyword">for</span> kb_id <span class="hljs-keyword">in</span> kb_ids <span class="hljs-keyword">if</span> kb_id]))<br><br>        kbs = KnowledgebaseService.get_by_ids(filtered_kb_ids)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> kbs:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;No dataset is selected.&quot;</span>)<br><br>        embd_nms = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>([kb.embd_id <span class="hljs-keyword">for</span> kb <span class="hljs-keyword">in</span> kbs]))<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(embd_nms) == <span class="hljs-number">1</span>, <span class="hljs-string">&quot;Knowledge bases use different embedding models.&quot;</span>    <span class="hljs-comment"># 一次检索必须所有库用同一种向量模型，否则无法拼结果</span><br><br>        embd_mdl = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> embd_nms:<br>            embd_mdl = LLMBundle(<span class="hljs-variable language_">self</span>._canvas.get_tenant_id(), LLMType.EMBEDDING, embd_nms[<span class="hljs-number">0</span>])<br><br>        rerank_mdl = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>._param.rerank_id:<br>            rerank_mdl = LLMBundle(kbs[<span class="hljs-number">0</span>].tenant_id, LLMType.RERANK, <span class="hljs-variable language_">self</span>._param.rerank_id)<br><br>        <span class="hljs-built_in">vars</span> = <span class="hljs-variable language_">self</span>.get_input_elements_from_text(kwargs[<span class="hljs-string">&quot;query&quot;</span>])<br>        <span class="hljs-built_in">vars</span> = &#123;k:o[<span class="hljs-string">&quot;value&quot;</span>] <span class="hljs-keyword">for</span> k,o <span class="hljs-keyword">in</span> <span class="hljs-built_in">vars</span>.items()&#125;<br>        query = <span class="hljs-variable language_">self</span>.string_format(kwargs[<span class="hljs-string">&quot;query&quot;</span>], <span class="hljs-built_in">vars</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>._param.cross_languages:<br>             <span class="hljs-comment"># 跨语言场景：把 query 翻成目标语言</span><br>            query = cross_languages(kbs[<span class="hljs-number">0</span>].tenant_id, <span class="hljs-literal">None</span>, query, <span class="hljs-variable language_">self</span>._param.cross_languages)<br><br>        <span class="hljs-keyword">if</span> kbs:<br>            query = re.sub(<span class="hljs-string">r&quot;^user[:：\s]*&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, query, flags=re.IGNORECASE)<br>            kbinfos = settings.retrievaler.retrieval(<br>                query,<br>                embd_mdl,<br>                [kb.tenant_id <span class="hljs-keyword">for</span> kb <span class="hljs-keyword">in</span> kbs],<br>                filtered_kb_ids,<br>                <span class="hljs-number">1</span>,<br>                <span class="hljs-variable language_">self</span>._param.top_n,<br>                <span class="hljs-variable language_">self</span>._param.similarity_threshold,<br>                <span class="hljs-number">1</span> - <span class="hljs-variable language_">self</span>._param.keywords_similarity_weight,<br>                aggs=<span class="hljs-literal">False</span>,<br>                rerank_mdl=rerank_mdl,<br>                rank_feature=label_question(query, kbs),<br>            )<br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>._param.use_kg:    <span class="hljs-comment"># 如果开启知识图谱</span><br>                ck = settings.kg_retrievaler.retrieval(query,<br>                                                       [kb.tenant_id <span class="hljs-keyword">for</span> kb <span class="hljs-keyword">in</span> kbs],<br>                                                       kb_ids,<br>                                                       embd_mdl,<br>                                                       LLMBundle(<span class="hljs-variable language_">self</span>._canvas.get_tenant_id(), LLMType.CHAT))<br>                <span class="hljs-keyword">if</span> ck[<span class="hljs-string">&quot;content_with_weight&quot;</span>]:<br>                    kbinfos[<span class="hljs-string">&quot;chunks&quot;</span>].insert(<span class="hljs-number">0</span>, ck)<br>        <span class="hljs-keyword">else</span>:<br>            kbinfos = &#123;<span class="hljs-string">&quot;chunks&quot;</span>: [], <span class="hljs-string">&quot;doc_aggs&quot;</span>: []&#125;<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>._param.use_kg <span class="hljs-keyword">and</span> kbs:<br>            ck = settings.kg_retrievaler.retrieval(query, [kb.tenant_id <span class="hljs-keyword">for</span> kb <span class="hljs-keyword">in</span> kbs], filtered_kb_ids, embd_mdl, LLMBundle(kbs[<span class="hljs-number">0</span>].tenant_id, LLMType.CHAT))<br>            <span class="hljs-keyword">if</span> ck[<span class="hljs-string">&quot;content_with_weight&quot;</span>]:<br>                ck[<span class="hljs-string">&quot;content&quot;</span>] = ck[<span class="hljs-string">&quot;content_with_weight&quot;</span>]<br>                <span class="hljs-keyword">del</span> ck[<span class="hljs-string">&quot;content_with_weight&quot;</span>]<br>                kbinfos[<span class="hljs-string">&quot;chunks&quot;</span>].insert(<span class="hljs-number">0</span>, ck)<br><br>        <span class="hljs-keyword">for</span> ck <span class="hljs-keyword">in</span> kbinfos[<span class="hljs-string">&quot;chunks&quot;</span>]:<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;vector&quot;</span> <span class="hljs-keyword">in</span> ck:<br>                <span class="hljs-keyword">del</span> ck[<span class="hljs-string">&quot;vector&quot;</span>]<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;content_ltks&quot;</span> <span class="hljs-keyword">in</span> ck:<br>                <span class="hljs-keyword">del</span> ck[<span class="hljs-string">&quot;content_ltks&quot;</span>]<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> kbinfos[<span class="hljs-string">&quot;chunks&quot;</span>]:<br>            <span class="hljs-variable language_">self</span>.set_output(<span class="hljs-string">&quot;formalized_content&quot;</span>, <span class="hljs-variable language_">self</span>._param.empty_response)<br>            <span class="hljs-keyword">return</span><br><br>        <span class="hljs-variable language_">self</span>._canvas.add_refernce(kbinfos[<span class="hljs-string">&quot;chunks&quot;</span>], kbinfos[<span class="hljs-string">&quot;doc_aggs&quot;</span>])<br>        form_cnt = <span class="hljs-string">&quot;\n&quot;</span>.join(kb_prompt(kbinfos, <span class="hljs-number">200000</span>, <span class="hljs-literal">True</span>))<br>        <span class="hljs-variable language_">self</span>.set_output(<span class="hljs-string">&quot;formalized_content&quot;</span>, form_cnt)<br>        <span class="hljs-keyword">return</span> form_cnt<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">thoughts</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Keywords: &#123;&#125; </span><br><span class="hljs-string">Looking for the most relevant articles.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-variable language_">self</span>.get_input().get(<span class="hljs-string">&quot;query&quot;</span>, <span class="hljs-string">&quot;-_-!&quot;</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大模型框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大模型框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ragflow0.20.4(agent_with_tools)</title>
    <link href="/2025/09/16/agent_with_tools/"/>
    <url>/2025/09/16/agent_with_tools/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_react_with_tools_streamly</span>(<span class="hljs-params">self, prompt, history: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">dict</span>], use_tools</span>):<br>        token_count = <span class="hljs-number">0</span>     <span class="hljs-comment">#累计本次交互消耗的 token（或近似值）       </span><br>        tool_metas = <span class="hljs-variable language_">self</span>.tool_meta<br>        hist = deepcopy(history)<br>        last_calling = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(hist) &gt; <span class="hljs-number">3</span>:<br>            st = timer()<br>            <span class="hljs-comment"># 把历史整合成一个“完整的问题/请求” user_request</span><br>            user_request = full_question(messages=history, chat_mdl=<span class="hljs-variable language_">self</span>.chat_mdl)<br>            <span class="hljs-variable language_">self</span>.callback(<span class="hljs-string">&quot;Multi-turn conversation optimization&quot;</span>, &#123;&#125;, user_request, elapsed_time=timer()-st)<br>        <span class="hljs-keyword">else</span>:<br>            user_request = history[-<span class="hljs-number">1</span>][<span class="hljs-string">&quot;content&quot;</span>]<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">use_tool</span>(<span class="hljs-params">name, args</span>):<br>            <span class="hljs-keyword">nonlocal</span> hist, use_tools, token_count,last_calling,user_request<br>            logging.info(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;last_calling=&#125;</span> == <span class="hljs-subst">&#123;name=&#125;</span>&quot;</span>)<br>            <span class="hljs-comment"># Summarize of function calling</span><br>            <span class="hljs-comment">#if all([</span><br>            <span class="hljs-comment">#    isinstance(self.toolcall_session.get_tool_obj(name), Agent),</span><br>            <span class="hljs-comment">#    last_calling,</span><br>            <span class="hljs-comment">#    last_calling != name</span><br>            <span class="hljs-comment">#]):</span><br>            <span class="hljs-comment">#    self.toolcall_session.get_tool_obj(name).add2system_prompt(f&quot;The chat history with other agents are as following: \n&quot; + self.get_useful_memory(user_request, str(args[&quot;user_prompt&quot;])))</span><br>            last_calling = name<br>            tool_response = <span class="hljs-variable language_">self</span>.toolcall_session.tool_call(name, args)<br>            use_tools.append(&#123;<br>                <span class="hljs-string">&quot;name&quot;</span>: name,<br>                <span class="hljs-string">&quot;arguments&quot;</span>: args,<br>                <span class="hljs-string">&quot;results&quot;</span>: tool_response<br>            &#125;)<br>            <span class="hljs-comment"># self.callback(&quot;add_memory&quot;, &#123;&#125;, &quot;...&quot;)</span><br>            <span class="hljs-comment">#self.add_memory(hist[-2][&quot;content&quot;], hist[-1][&quot;content&quot;], name, args, str(tool_response))</span><br><br>            <span class="hljs-keyword">return</span> name, tool_response<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">complete</span>():<span class="hljs-comment">#是一个生成器</span><br>            <span class="hljs-keyword">nonlocal</span> hist<br>            <span class="hljs-comment"># 判断是否需要生成引用</span><br>            need2cite = <span class="hljs-variable language_">self</span>._param.cite <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>._canvas.get_reference()[<span class="hljs-string">&quot;chunks&quot;</span>] <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>._<span class="hljs-built_in">id</span>.find(<span class="hljs-string">&quot;--&gt;&quot;</span>) &lt; <span class="hljs-number">0</span><br>            cited = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">if</span> hist[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;role&quot;</span>] == <span class="hljs-string">&quot;system&quot;</span> <span class="hljs-keyword">and</span> need2cite:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(hist) &lt; <span class="hljs-number">7</span>:<br>                    <span class="hljs-comment"># citation_prompt() 附加到 system 内容中，并把 cited=True 标记——目的在于让模型在生成时包含引用信息。</span><br>                    hist[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;content&quot;</span>] += citation_prompt()  <span class="hljs-comment"># 把 chunks 拼成一段段字符串，每段末尾追加出处信息，</span><br>                    <span class="hljs-comment"># 并控制总 token 不超过 max_tokens。</span><br>                    <span class="hljs-comment"># 返回: 字符串列表，每个元素是一段带引用的上下文。</span><br>                    cited = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;&quot;</span>, token_count<br><br>            _hist = hist<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(hist) &gt; <span class="hljs-number">12</span>:<br>                _hist = [hist[<span class="hljs-number">0</span>], hist[<span class="hljs-number">1</span>], *hist[-<span class="hljs-number">10</span>:]] <span class="hljs-comment"># “取 hist 的第 0 条、第 1 条，再加上最后 10 条，拼成新列表 _hist。”</span><br>            entire_txt = <span class="hljs-string">&quot;&quot;</span><br>            <span class="hljs-keyword">for</span> delta_ans <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>._generate_streamly(_hist):<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> need2cite <span class="hljs-keyword">or</span> cited:<br>                    <span class="hljs-keyword">yield</span> delta_ans, <span class="hljs-number">0</span><br>                entire_txt += delta_ans<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> need2cite <span class="hljs-keyword">or</span> cited:<br>                <span class="hljs-keyword">return</span><br><br>            st = timer()<br>            txt = <span class="hljs-string">&quot;&quot;</span><br>            <span class="hljs-comment"># 遍历一个生成器（或迭代器）_gen_citations，</span><br>            <span class="hljs-comment"># 它把 entire_txt 做切分，每次吐出一小段字符串（记为 delta_ans）。</span><br>            <span class="hljs-keyword">for</span> delta_ans <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>._gen_citations(entire_txt):<br>                <span class="hljs-keyword">yield</span> delta_ans, <span class="hljs-number">0</span><br>                txt += delta_ans<br>            <span class="hljs-comment"># 流式输出：边生成边 yield，调用方可以立刻看到增量内容，而不用等全部拼接完。</span><br>            <span class="hljs-comment"># 本地累积：同时把每一段拼到 txt可供后续步骤使用</span><br><br>            <span class="hljs-variable language_">self</span>.callback(<span class="hljs-string">&quot;gen_citations&quot;</span>, &#123;&#125;, txt, elapsed_time=timer()-st)<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">append_user_content</span>(<span class="hljs-params">hist, content</span>):<br>            <span class="hljs-keyword">if</span> hist[-<span class="hljs-number">1</span>][<span class="hljs-string">&quot;role&quot;</span>] == <span class="hljs-string">&quot;user&quot;</span>:<br>                hist[-<span class="hljs-number">1</span>][<span class="hljs-string">&quot;content&quot;</span>] += content<br>            <span class="hljs-keyword">else</span>:<br>                hist.append(&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: content&#125;)<br><br>        st = timer()<br>        <span class="hljs-comment"># 把大模型、提示模板、用户原始请求、可用工具列表喂给它，</span><br>        <span class="hljs-comment"># 让它返回一条结构化任务描述（task_desc），供后续步骤决定该怎么调用工具、生成回答。</span><br>        task_desc = analyze_task(<span class="hljs-variable language_">self</span>.chat_mdl, prompt, user_request, tool_metas)<br>        <span class="hljs-variable language_">self</span>.callback(<span class="hljs-string">&quot;analyze_task&quot;</span>, &#123;&#125;, task_desc, elapsed_time=timer()-st)<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>._param.max_rounds + <span class="hljs-number">1</span>):<br>            <span class="hljs-comment"># 把当前对话历史 hist 和工具列表喂给大模型，让它决定下一步：</span><br>            response, tk = next_step(<span class="hljs-variable language_">self</span>.chat_mdl, hist, tool_metas, task_desc)<br>            <span class="hljs-comment"># self.callback(&quot;next_step&quot;, &#123;&#125;, str(response)[:256]+&quot;...&quot;)</span><br>            token_count += tk<br>            hist.append(&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;assistant&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: response&#125;)<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment"># 试图把 response（先去掉三重反引号内的内容）解析为 JSON 列表 functions（每个元素是一个工具调用对象）。</span><br>                functions = json_repair.loads(re.sub(<span class="hljs-string">r&quot;```.*&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, response))<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(functions, <span class="hljs-built_in">list</span>):<br>                    <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">f&quot;List should be returned, but `<span class="hljs-subst">&#123;functions&#125;</span>`&quot;</span>)<br>                <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> functions:<br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(f, <span class="hljs-built_in">dict</span>):<br>                        <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">f&quot;An object type should be returned, but `<span class="hljs-subst">&#123;f&#125;</span>`&quot;</span>)<br>                <span class="hljs-keyword">with</span> ThreadPoolExecutor(max_workers=<span class="hljs-number">5</span>) <span class="hljs-keyword">as</span> executor:<br>                    thr = []<br>                    <span class="hljs-keyword">for</span> func <span class="hljs-keyword">in</span> functions:<br>                        name = func[<span class="hljs-string">&quot;name&quot;</span>]<br>                        args = func[<span class="hljs-string">&quot;arguments&quot;</span>]<br>                        <span class="hljs-keyword">if</span> name == COMPLETE_TASK:   <span class="hljs-comment">#   模型要求直接完成任务</span><br>                            append_user_content(hist, <span class="hljs-string">f&quot;Respond with a formal answer. FORGET(DO NOT mention) about `<span class="hljs-subst">&#123;COMPLETE_TASK&#125;</span>`. The language for the response MUST be as the same as the first user request.\n&quot;</span>)<br>                            <span class="hljs-keyword">for</span> txt, tkcnt <span class="hljs-keyword">in</span> complete():<br>                                <span class="hljs-keyword">yield</span> txt, tkcnt<br>                            <span class="hljs-keyword">return</span><br><br>                        thr.append(executor.submit(use_tool, name, args))<br><br>                    st = timer()<br>                    reflection = reflect(<span class="hljs-variable language_">self</span>.chat_mdl, hist, [th.result() <span class="hljs-keyword">for</span> th <span class="hljs-keyword">in</span> thr])<span class="hljs-comment">#等待所有并发工具调用完成并收集它们的返回值（阻塞直到完成）。</span><br>                    append_user_content(hist, reflection)<br>                    <span class="hljs-variable language_">self</span>.callback(<span class="hljs-string">&quot;reflection&quot;</span>, &#123;&#125;, <span class="hljs-built_in">str</span>(reflection), elapsed_time=timer()-st)<br><br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                logging.exception(msg=<span class="hljs-string">f&quot;Wrong JSON argument format in LLM ReAct response: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>                e = <span class="hljs-string">f&quot;\nTool call error, please correct the input parameter of response format and call it again.\n *** Exception ***\n<span class="hljs-subst">&#123;e&#125;</span>&quot;</span><br>                append_user_content(hist, <span class="hljs-built_in">str</span>(e))<br><br>        logging.warning( <span class="hljs-string">f&quot;Exceed max rounds: <span class="hljs-subst">&#123;self._param.max_rounds&#125;</span>&quot;</span>)<br>        final_instruction = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string"><span class="hljs-subst">&#123;user_request&#125;</span></span><br><span class="hljs-string">IMPORTANT: You have reached the conversation limit. Based on ALL the information and research you have gathered so far, please provide a DIRECT and COMPREHENSIVE final answer to the original request.</span><br><span class="hljs-string">Instructions:</span><br><span class="hljs-string">1. SYNTHESIZE all information collected during this conversation</span><br><span class="hljs-string">2. Provide a COMPLETE response using existing data - do not suggest additional research</span><br><span class="hljs-string">3. Structure your response as a FINAL DELIVERABLE, not a plan</span><br><span class="hljs-string">4. If information is incomplete, state what you found and provide the best analysis possible with available data</span><br><span class="hljs-string">5. DO NOT mention conversation limits or suggest further steps</span><br><span class="hljs-string">6. Focus on delivering VALUE with the information already gathered</span><br><span class="hljs-string">Respond immediately with your final comprehensive answer.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        append_user_content(hist, final_instruction)<br><br>        <span class="hljs-keyword">for</span> txt, tkcnt <span class="hljs-keyword">in</span> complete():<br>            <span class="hljs-keyword">yield</span> txt, tkcnt<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_useful_memory</span>(<span class="hljs-params">self, goal: <span class="hljs-built_in">str</span>, sub_goal:<span class="hljs-built_in">str</span>, topn=<span class="hljs-number">3</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-comment"># self.callback(&quot;get_useful_memory&quot;, &#123;&quot;topn&quot;: 3&#125;, &quot;...&quot;)</span><br>        mems = <span class="hljs-variable language_">self</span>._canvas.get_memory()<br>        rank = rank_memories(<span class="hljs-variable language_">self</span>.chat_mdl, goal, sub_goal, [summ <span class="hljs-keyword">for</span> (user, assist, summ) <span class="hljs-keyword">in</span> mems])<br>        <span class="hljs-keyword">try</span>:<br>            rank = json_repair.loads(re.sub(<span class="hljs-string">r&quot;```.*&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, rank))[:topn]<br>            mems = [mems[r] <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> rank]<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;\n\n&quot;</span>.join([<span class="hljs-string">f&quot;User: <span class="hljs-subst">&#123;u&#125;</span>\nAgent: <span class="hljs-subst">&#123;a&#125;</span>&quot;</span> <span class="hljs-keyword">for</span> u, a,_ <span class="hljs-keyword">in</span> mems])<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            logging.exception(e)<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Error occurred.&quot;</span><br><br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">stream_output_with_tools</span>(<span class="hljs-params">self, prompt, msg</span>):<br>        <span class="hljs-comment"># 把系统提示 + 用户历史消息拼在一起，调用 message_fit_in 做截断，确保总长度不超过模型最大长度的 97 %</span><br>        <span class="hljs-comment"># ；返回截断后的新历史 msg（第一个返回值是 token 数，这里用 _ 忽略）。</span><br>        _, msg = message_fit_in([&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: prompt&#125;, *msg], <span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>.chat_mdl.max_length * <span class="hljs-number">0.97</span>))<br>        answer_without_toolcall = <span class="hljs-string">&quot;&quot;</span>    <span class="hljs-comment">#累积“纯文本回答”</span><br>        use_tools = []<br>        <span class="hljs-keyword">for</span> delta_ans,_ <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>._react_with_tools_streamly(prompt, msg, use_tools):<br>            <span class="hljs-keyword">if</span> delta_ans.find(<span class="hljs-string">&quot;**ERROR**&quot;</span>) &gt;= <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.get_exception_default_value():<br>                    <span class="hljs-variable language_">self</span>.set_output(<span class="hljs-string">&quot;content&quot;</span>, <span class="hljs-variable language_">self</span>.get_exception_default_value())<br>                    <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">self</span>.get_exception_default_value()<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-variable language_">self</span>.set_output(<span class="hljs-string">&quot;_ERROR&quot;</span>, delta_ans)<br>            answer_without_toolcall += delta_ans<br>            <span class="hljs-keyword">yield</span> delta_ans<br><br>        <span class="hljs-variable language_">self</span>.set_output(<span class="hljs-string">&quot;content&quot;</span>, answer_without_toolcall)<br>        <span class="hljs-keyword">if</span> use_tools:<br>            <span class="hljs-variable language_">self</span>.set_output(<span class="hljs-string">&quot;use_tools&quot;</span>, use_tools)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_gen_citations</span>(<span class="hljs-params">self, text</span>):<br>        retrievals = <span class="hljs-variable language_">self</span>._canvas.get_reference()<br>        retrievals = &#123;<span class="hljs-string">&quot;chunks&quot;</span>: <span class="hljs-built_in">list</span>(retrievals[<span class="hljs-string">&quot;chunks&quot;</span>].values()), <span class="hljs-string">&quot;doc_aggs&quot;</span>: <span class="hljs-built_in">list</span>(retrievals[<span class="hljs-string">&quot;doc_aggs&quot;</span>].values())&#125;<br>        formated_refer = kb_prompt(retrievals, <span class="hljs-variable language_">self</span>.chat_mdl.max_length, <span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">for</span> delta_ans <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>._generate_streamly([&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: citation_plus(<span class="hljs-string">&quot;\n\n&quot;</span>.join(formated_refer))&#125;,<br>                                                  &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: text&#125;<br>                                                  ]):<br>            <span class="hljs-keyword">yield</span> delta_ans<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大模型框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大模型框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ragflow0.20.4(prompts)</title>
    <link href="/2025/09/12/prompts/"/>
    <url>/2025/09/12/prompts/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">reflect</span>(<span class="hljs-params">chat_mdl, history: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">dict</span>], tool_call_res: <span class="hljs-built_in">list</span>[<span class="hljs-type">Tuple</span>]</span>):<br>    tool_calls = [&#123;<span class="hljs-string">&quot;name&quot;</span>: p[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;result&quot;</span>: p[<span class="hljs-number">1</span>]&#125; <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> tool_call_res]<br>    goal = history[<span class="hljs-number">1</span>][<span class="hljs-string">&quot;content&quot;</span>]    <span class="hljs-comment">#从对话历史 history 的第二个元素（索引为 1）中提取 &quot;content&quot; 字段，赋值给 goal</span><br>    template = PROMPT_JINJA_ENV.from_string(REFLECT)    <span class="hljs-comment">#使用 Jinja2 模板引擎（PROMPT_JINJA_ENV）从字符串 REFLECT 创建一个模板对象。</span><br>    user_prompt = template.render(goal=goal, tool_calls=tool_calls)<br>    hist = deepcopy(history)<br>    <span class="hljs-keyword">if</span> hist[-<span class="hljs-number">1</span>][<span class="hljs-string">&quot;role&quot;</span>] == <span class="hljs-string">&quot;user&quot;</span>:<br>        hist[-<span class="hljs-number">1</span>][<span class="hljs-string">&quot;content&quot;</span>] += user_prompt<br>    <span class="hljs-keyword">else</span>:<br>        hist.append(&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: user_prompt&#125;)<br>    _, msg = message_fit_in(hist, chat_mdl.max_length)  <span class="hljs-comment">#_ 表示忽略第一个返回值，msg 是一个处理后的消息列表，可能是截断后的对话历史。</span><br>    ans = chat_mdl.chat(msg[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;content&quot;</span>], msg[<span class="hljs-number">1</span>:]) <span class="hljs-comment">#第一个参数 msg[0][&quot;content&quot;] 是调整后的消息列表的第一个消息内容（可能是用户提示）。第二个参数 msg[1:] 是剩余的对话历史（列表切片）。</span><br>    ans = re.sub(<span class="hljs-string">r&quot;^.*&lt;/think&gt;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, ans, flags=re.DOTALL)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">**Observation**</span><br><span class="hljs-string">&#123;&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">**Reflection**</span><br><span class="hljs-string">&#123;&#125;</span><br><span class="hljs-string">    &quot;&quot;&quot;</span>.<span class="hljs-built_in">format</span>(json.dumps(tool_calls, ensure_ascii=<span class="hljs-literal">False</span>, indent=<span class="hljs-number">2</span>), ans)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">next_step</span>(<span class="hljs-params">chat_mdl, history:<span class="hljs-built_in">list</span>, tools_description: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">dict</span>], task_desc</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> tools_description:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>    desc = tool_schema(tools_description)   <br>    template = PROMPT_JINJA_ENV.from_string(NEXT_STEP)<span class="hljs-comment">#是可以渲染的 Jinja2 模板对象，用于生成用户提示。</span><br>    user_prompt = <span class="hljs-string">&quot;\nWhat&#x27;s the next tool to call? If ready OR IMPOSSIBLE TO BE READY, then call `complete_task`.&quot;</span><br>    hist = deepcopy(history)<br>    <span class="hljs-keyword">if</span> hist[-<span class="hljs-number">1</span>][<span class="hljs-string">&quot;role&quot;</span>] == <span class="hljs-string">&quot;user&quot;</span>:<br>        hist[-<span class="hljs-number">1</span>][<span class="hljs-string">&quot;content&quot;</span>] += user_prompt<br>    <span class="hljs-keyword">else</span>:<br>        hist.append(&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: user_prompt&#125;)<br><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    hist[1:]：传入对话历史从第二个元素开始（忽略第一个元素，可能是系统提示）。</span><br><span class="hljs-string">    stop=[&quot;&lt;|stop|&gt;&quot;]：指定停止标志，当模型生成 &lt;|stop|&gt; 时停止输出。</span><br><span class="hljs-string">    json_str 是聊天模型生成的回复，预计是一个 JSON 格式的字符串，表示下一步要调用的工具。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    json_str = chat_mdl.chat(template.render(task_analisys=task_desc, desc=desc, today=datetime.datetime.now().strftime(<span class="hljs-string">&quot;%Y-%m-%d&quot;</span>)),<br>                             hist[<span class="hljs-number">1</span>:], stop=[<span class="hljs-string">&quot;&lt;|stop|&gt;&quot;</span>])<br>    tk_cnt = num_tokens_from_string(json_str)<br>    json_str = re.sub(<span class="hljs-string">r&quot;^.*&lt;/think&gt;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, json_str, flags=re.DOTALL)<br>    <span class="hljs-keyword">return</span> json_str, tk_cnt<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大模型框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大模型框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2025/09/10/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/Redis/"/>
    <url>/2025/09/10/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/Redis/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="一、Redis-的物理结构"><a href="#一、Redis-的物理结构" class="headerlink" title="一、Redis 的物理结构"></a>一、Redis 的物理结构</h2><p><code>Redis 的物理结构是：Redis 由一个或多个 Redis 服务器（指运行 Redis 服务器程序的机器）组成，每个 Redis 服务器由一个或多个 Redis 数据库组成，而每个 Redis 数据库由多个 key-value 组成。</code><br>┌—————-Redis 进程—————-┐<br>│  默认 16 个逻辑库（DB0 ~ DB15）          │<br>│  彼此隔离，用 SELECT 0&#x2F;1&#x2F;2… 切换      │<br>└—————————————–┘</p><ul><li>端口同是 6379，DB 之间数据不互通</li></ul><h2 id="二、每个-DB-里只有一层结构：键→值"><a href="#二、每个-DB-里只有一层结构：键→值" class="headerlink" title="二、每个 DB 里只有一层结构：键→值"></a>二、每个 DB 里只有一层结构：键→值</h2><h2 id="DB1-本质就是一个大-Map：key-value"><a href="#DB1-本质就是一个大-Map：key-value" class="headerlink" title="DB1 本质就是一个大 Map：key               value"></a>DB1 本质就是一个大 Map：<br>key               value</h2><p>celery            list [“task1”, “task2” …]   ← 队列<br>celery.metadata   hash  {task1: {…}}         ← 任务元数据<br>user:123          hash  {name: “tom”}           ← 你自己存的业务数据<br>ragflow::lock::xx string 1                      ← 分布式锁</p><p><code>“队列”只是值类型为 list 的一个普通 key，名字随便取（默认叫 celery）。</code></p><h2 id="三、Redis-的数据类型三、Celery-的“队列”究竟怎么放"><a href="#三、Redis-的数据类型三、Celery-的“队列”究竟怎么放" class="headerlink" title="三、Redis 的数据类型三、Celery 的“队列”究竟怎么放"></a>三、Redis 的数据类型三、Celery 的“队列”究竟怎么放</h2><p>1.派单时<br>celery.send_task(…, queue&#x3D;’celery’)<br>内部执行：<br>LPUSH celery  {“id”:”123”, “task”:”ragflow.tasks.parse_document”}</p><p>2.Worker 启动时<br>BRPOP celery   ← 阻塞式弹出，谁先到谁先干</p><p>3.结论</p><!-- 队列 = 一个 list 类型的键生产者是 Web 进程，消费者是 Celery Worker不同队列就是不同 key 名，如 parse、ocr、index... --><h2 id="celery-是什么？"><a href="#celery-是什么？" class="headerlink" title="celery 是什么？"></a>celery 是什么？</h2><p><code>Celery 是一个分布式任务队列，它负责在后台运行一系列任务，比如：派单、OCR、索引、翻译...</code><br>celery 就是“分布式任务调度库”——帮你把“任务”从 Web 端丢到 Redis 队列，再让远程&#x2F;本地的 Worker 把任务捞起来执行。</p><p>Web 进程（生产者） →  Redis（broker 队列） →  Worker（消费者）</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ragflow0.20.4(Cavans)</title>
    <link href="/2025/09/10/ragflow0.20.4Canvas/"/>
    <url>/2025/09/10/ragflow0.20.4Canvas/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self, **kwargs</span>):<br>        st = time.perf_counter()<br>        <span class="hljs-variable language_">self</span>.message_id = get_uuid()<br>        created_at = <span class="hljs-built_in">int</span>(time.time())<br>        <span class="hljs-variable language_">self</span>.add_user_input(kwargs.get(<span class="hljs-string">&quot;query&quot;</span>))<br><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> kwargs.keys():<br>            <span class="hljs-keyword">if</span> k <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;query&quot;</span>, <span class="hljs-string">&quot;user_id&quot;</span>, <span class="hljs-string">&quot;files&quot;</span>] <span class="hljs-keyword">and</span> kwargs[k]:<br>                <span class="hljs-keyword">if</span> k == <span class="hljs-string">&quot;files&quot;</span>:<br>                    <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">globals</span>[<span class="hljs-string">f&quot;sys.<span class="hljs-subst">&#123;k&#125;</span>&quot;</span>] = <span class="hljs-variable language_">self</span>.get_files(kwargs[k])<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">globals</span>[<span class="hljs-string">f&quot;sys.<span class="hljs-subst">&#123;k&#125;</span>&quot;</span>] = kwargs[k]<br><br>                    <span class="hljs-comment"># 未初始化，则设为0，然后加1，表示对话轮数+1。</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">globals</span>[<span class="hljs-string">&quot;sys.conversation_turns&quot;</span>] :<br>            <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">globals</span>[<span class="hljs-string">&quot;sys.conversation_turns&quot;</span>] = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">globals</span>[<span class="hljs-string">&quot;sys.conversation_turns&quot;</span>] += <span class="hljs-number">1</span><br><br>      <span class="hljs-comment"># 生成标准化的事件字典，包含事件类型、消息ID、时间戳、任务ID和数据内容。</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorate</span>(<span class="hljs-params">event, dt</span>):<br>            <span class="hljs-keyword">nonlocal</span> created_at<br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-string">&quot;event&quot;</span>: event,<br>                <span class="hljs-comment">#&quot;conversation_id&quot;: &quot;f3cc152b-24b0-4258-a1a1-7d5e9fc8a115&quot;,</span><br>                <span class="hljs-string">&quot;message_id&quot;</span>: <span class="hljs-variable language_">self</span>.message_id,<br>                <span class="hljs-string">&quot;created_at&quot;</span>: created_at,<br>                <span class="hljs-string">&quot;task_id&quot;</span>: <span class="hljs-variable language_">self</span>.task_id,<br>                <span class="hljs-string">&quot;data&quot;</span>: dt<br>            &#125;<br><br>        <span class="hljs-comment"># 如果 self.path 为空或末尾不是 userfillup，把 &quot;begin&quot; 插入路径，同时向 self.retrieval 添加空条目。</span><br>        <span class="hljs-comment"># 注意：.find(...) &lt; 0 是判断字符串不包含子串，等价于 not &quot;userfillup&quot; in</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.path <span class="hljs-keyword">or</span> <span class="hljs-variable language_">self</span>.path[-<span class="hljs-number">1</span>].lower().find(<span class="hljs-string">&quot;userfillup&quot;</span>) &lt; <span class="hljs-number">0</span>:<br>            <span class="hljs-variable language_">self</span>.path.append(<span class="hljs-string">&quot;begin&quot;</span>)<br>            <span class="hljs-variable language_">self</span>.retrieval.append(&#123;<span class="hljs-string">&quot;chunks&quot;</span>: [], <span class="hljs-string">&quot;doc_aggs&quot;</span>: []&#125;)<br><br>        <span class="hljs-comment"># 广播工作流开始事件。</span><br>        <span class="hljs-keyword">yield</span> decorate(<span class="hljs-string">&quot;workflow_started&quot;</span>, &#123;<span class="hljs-string">&quot;inputs&quot;</span>: kwargs.get(<span class="hljs-string">&quot;inputs&quot;</span>)&#125;)<br>        <span class="hljs-variable language_">self</span>.retrieval.append(&#123;<span class="hljs-string">&quot;chunks&quot;</span>: &#123;&#125;, <span class="hljs-string">&quot;doc_aggs&quot;</span>: &#123;&#125;&#125;)<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">_run_batch</span>(<span class="hljs-params">f, t</span>):<br>            <span class="hljs-comment"># 并发调用路径 self.path[f:t] 上的组件的 invoke 方法。</span><br>            <span class="hljs-keyword">with</span> ThreadPoolExecutor(max_workers=<span class="hljs-number">5</span>) <span class="hljs-keyword">as</span> executor:<br>                thr = []<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(f, t):<br>                    cpn = <span class="hljs-variable language_">self</span>.get_component_obj(<span class="hljs-variable language_">self</span>.path[i])<br>                    <span class="hljs-keyword">if</span> cpn.component_name.lower() <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;begin&quot;</span>, <span class="hljs-string">&quot;userfillup&quot;</span>]:<br>                        <span class="hljs-comment"># executor.submit(...) 会返回一个 Future（异步任务对象），表示该任务已经排队等待执行。</span><br>                        thr.append(executor.submit(cpn.invoke, inputs=kwargs.get(<span class="hljs-string">&quot;inputs&quot;</span>, &#123;&#125;)))<br>                    <span class="hljs-keyword">else</span>:<br>                        thr.append(executor.submit(cpn.invoke, **cpn.get_input()))<br>                <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> thr:<br>                    t.result()<br><br>        <span class="hljs-comment"># 格式化单个节点完成事件。</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">_node_finished</span>(<span class="hljs-params">cpn_obj</span>):<br>            <span class="hljs-keyword">return</span> decorate(<span class="hljs-string">&quot;node_finished&quot;</span>,&#123;<br>                           <span class="hljs-string">&quot;inputs&quot;</span>: cpn_obj.get_input_values(),<br>                           <span class="hljs-string">&quot;outputs&quot;</span>: cpn_obj.output(),<br>                           <span class="hljs-string">&quot;component_id&quot;</span>: cpn_obj._<span class="hljs-built_in">id</span>,<br>                           <span class="hljs-string">&quot;component_name&quot;</span>: <span class="hljs-variable language_">self</span>.get_component_name(cpn_obj._<span class="hljs-built_in">id</span>),<br>                           <span class="hljs-string">&quot;component_type&quot;</span>: <span class="hljs-variable language_">self</span>.get_component_type(cpn_obj._<span class="hljs-built_in">id</span>),<br>                           <span class="hljs-string">&quot;error&quot;</span>: cpn_obj.error(),<br>                           <span class="hljs-string">&quot;elapsed_time&quot;</span>: time.perf_counter() - cpn_obj.output(<span class="hljs-string">&quot;_created_time&quot;</span>),<br>                           <span class="hljs-string">&quot;created_at&quot;</span>: cpn_obj.output(<span class="hljs-string">&quot;_created_time&quot;</span>),<br>                       &#125;)<br><br>        <span class="hljs-variable language_">self</span>.error = <span class="hljs-string">&quot;&quot;</span><br>        idx = <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.path) - <span class="hljs-number">1</span><br>        partials = []<br>        <span class="hljs-comment"># 主循环和节点启动</span><br>        <span class="hljs-keyword">while</span> idx &lt; <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.path):<br>            to = <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.path)<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(idx, to):<br>                <span class="hljs-keyword">yield</span> decorate(<span class="hljs-string">&quot;node_started&quot;</span>, &#123;<br>                    <span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-built_in">int</span>(time.time()),<br>                    <span class="hljs-string">&quot;component_id&quot;</span>: <span class="hljs-variable language_">self</span>.path[i],<br>                    <span class="hljs-string">&quot;component_name&quot;</span>: <span class="hljs-variable language_">self</span>.get_component_name(<span class="hljs-variable language_">self</span>.path[i]),<br>                    <span class="hljs-string">&quot;component_type&quot;</span>: <span class="hljs-variable language_">self</span>.get_component_type(<span class="hljs-variable language_">self</span>.path[i]),<br>                    <span class="hljs-string">&quot;thoughts&quot;</span>: <span class="hljs-variable language_">self</span>.get_component_thoughts(<span class="hljs-variable language_">self</span>.path[i])<br>                &#125;)<br>            _run_batch(idx, to)<br><br>            <span class="hljs-comment"># 节点后处理：message 类型与 partial 流式处理</span><br>            <span class="hljs-comment"># post processing of components invocation</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(idx, to):<br>                cpn = <span class="hljs-variable language_">self</span>.get_component(<span class="hljs-variable language_">self</span>.path[i])<br>                cpn_obj = <span class="hljs-variable language_">self</span>.get_component_obj(<span class="hljs-variable language_">self</span>.path[i])<br>                <span class="hljs-keyword">if</span> cpn_obj.component_name.lower() == <span class="hljs-string">&quot;message&quot;</span>:<br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(cpn_obj.output(<span class="hljs-string">&quot;content&quot;</span>), partial):<br>                        _m = <span class="hljs-string">&quot;&quot;</span><br>                        <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> cpn_obj.output(<span class="hljs-string">&quot;content&quot;</span>)():<br>                            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> m:<br>                                <span class="hljs-keyword">continue</span><br>                            <span class="hljs-keyword">if</span> m == <span class="hljs-string">&quot;&lt;think&gt;&quot;</span>:<br>                                <span class="hljs-keyword">yield</span> decorate(<span class="hljs-string">&quot;message&quot;</span>, &#123;<span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;start_to_think&quot;</span>: <span class="hljs-literal">True</span>&#125;)<br>                            <span class="hljs-keyword">elif</span> m == <span class="hljs-string">&quot;&lt;/think&gt;&quot;</span>:<br>                                <span class="hljs-keyword">yield</span> decorate(<span class="hljs-string">&quot;message&quot;</span>, &#123;<span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;end_to_think&quot;</span>: <span class="hljs-literal">True</span>&#125;)<br>                            <span class="hljs-keyword">else</span>:<br>                                <span class="hljs-keyword">yield</span> decorate(<span class="hljs-string">&quot;message&quot;</span>, &#123;<span class="hljs-string">&quot;content&quot;</span>: m&#125;)<br>                                _m += m<br>                        cpn_obj.set_output(<span class="hljs-string">&quot;content&quot;</span>, _m)<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-keyword">yield</span> decorate(<span class="hljs-string">&quot;message&quot;</span>, &#123;<span class="hljs-string">&quot;content&quot;</span>: cpn_obj.output(<span class="hljs-string">&quot;content&quot;</span>)&#125;)<br>                    <span class="hljs-keyword">yield</span> decorate(<span class="hljs-string">&quot;message_end&quot;</span>, &#123;<span class="hljs-string">&quot;reference&quot;</span>: <span class="hljs-variable language_">self</span>.get_reference()&#125;)<br><br>                    <span class="hljs-keyword">while</span> partials:<br>                        _cpn_obj = <span class="hljs-variable language_">self</span>.get_component_obj(partials[<span class="hljs-number">0</span>])<br>                        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(_cpn_obj.output(<span class="hljs-string">&quot;content&quot;</span>), partial):<br>                            <span class="hljs-keyword">break</span><br>                        <span class="hljs-keyword">yield</span> _node_finished(_cpn_obj)<br>                        partials.pop(<span class="hljs-number">0</span>)<br><br>                <span class="hljs-comment"># 组件错误/跳转/路径扩展逻辑</span><br>                <span class="hljs-comment"># 如果节点出错，尝试处理异常。可以 goto 指定下一分支，或使用 default_value，否则把错误写到 self.error。</span><br>                other_branch = <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">if</span> cpn_obj.error():<br>                    ex = cpn_obj.exception_handler()<span class="hljs-comment">#返回一个**“异常信息对象”**</span><br>                    <span class="hljs-keyword">if</span> ex <span class="hljs-keyword">and</span> ex[<span class="hljs-string">&quot;goto&quot;</span>]:<br>                        <span class="hljs-variable language_">self</span>.path.extend(ex[<span class="hljs-string">&quot;goto&quot;</span>])<br>                        other_branch = <span class="hljs-literal">True</span><br>                    <span class="hljs-keyword">elif</span> ex <span class="hljs-keyword">and</span> ex[<span class="hljs-string">&quot;default_value&quot;</span>]:<br>                        <span class="hljs-keyword">yield</span> decorate(<span class="hljs-string">&quot;message&quot;</span>, &#123;<span class="hljs-string">&quot;content&quot;</span>: ex[<span class="hljs-string">&quot;default_value&quot;</span>]&#125;)<br>                        <span class="hljs-keyword">yield</span> decorate(<span class="hljs-string">&quot;message_end&quot;</span>, &#123;&#125;)<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-variable language_">self</span>.error = cpn_obj.error()<br><br>                <span class="hljs-keyword">if</span> cpn_obj.component_name.lower() != <span class="hljs-string">&quot;iteration&quot;</span>:<br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(cpn_obj.output(<span class="hljs-string">&quot;content&quot;</span>), partial):<br>                        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.error:<br>                            cpn_obj.set_output(<span class="hljs-string">&quot;content&quot;</span>, <span class="hljs-literal">None</span>)<br>                            <span class="hljs-keyword">yield</span> _node_finished(cpn_obj)<br>                        <span class="hljs-keyword">else</span>:<br>                            partials.append(<span class="hljs-variable language_">self</span>.path[i])<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-keyword">yield</span> _node_finished(cpn_obj)<br><br>                <span class="hljs-keyword">def</span> <span class="hljs-title function_">_append_path</span>(<span class="hljs-params">cpn_id</span>):<br>                    <span class="hljs-keyword">nonlocal</span> other_branch<br>                    <span class="hljs-keyword">if</span> other_branch:<br>                        <span class="hljs-keyword">return</span><br>                    <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.path[-<span class="hljs-number">1</span>] == cpn_id:<br>                        <span class="hljs-keyword">return</span><br>                    <span class="hljs-variable language_">self</span>.path.append(cpn_id)<br><br>                <span class="hljs-keyword">def</span> <span class="hljs-title function_">_extend_path</span>(<span class="hljs-params">cpn_ids</span>):<br>                    <span class="hljs-keyword">nonlocal</span> other_branch<br>                    <span class="hljs-keyword">if</span> other_branch:<br>                        <span class="hljs-keyword">return</span><br>                    <span class="hljs-keyword">for</span> cpn_id <span class="hljs-keyword">in</span> cpn_ids:<br>                        _append_path(cpn_id)<br><br>                <span class="hljs-comment"># 如果当前节点是 iterationItem（迭代中的单个元素节点），并且已经 结束了迭代：</span><br>                <span class="hljs-keyword">if</span> cpn_obj.component_name.lower() == <span class="hljs-string">&quot;iterationitem&quot;</span> <span class="hljs-keyword">and</span> cpn_obj.end():<br>                    <span class="hljs-comment"># 找到它的父节点（即外层的 iteration 节点），发出 node_finished 事件，表示整个迭代结束。</span><br>                    <span class="hljs-built_in">iter</span> = cpn_obj.get_parent()<br>                    <span class="hljs-keyword">yield</span> _node_finished(<span class="hljs-built_in">iter</span>)<br>                    <span class="hljs-comment"># 然后把 父节点的 downstream（下游节点） 加到执行路径里，继续执行迭代后的流程。</span><br>                    _extend_path(<span class="hljs-variable language_">self</span>.get_component(cpn[<span class="hljs-string">&quot;parent_id&quot;</span>])[<span class="hljs-string">&quot;downstream&quot;</span>])<br>                <span class="hljs-comment"># 如果当前节点是 categorize（分类）或者 switch（条件分支）：</span><br>                <span class="hljs-keyword">elif</span> cpn_obj.component_name.lower() <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;categorize&quot;</span>, <span class="hljs-string">&quot;switch&quot;</span>]:<br>                    <span class="hljs-comment"># 从该节点的输出 _next 里取下一步的节点 ID，然后加到路径里。</span><br>                    <span class="hljs-comment"># 相当于：根据条件/分类结果，跳转到某个特定分支继续执行。</span><br>                    _extend_path(cpn_obj.output(<span class="hljs-string">&quot;_next&quot;</span>))<br>                <span class="hljs-keyword">elif</span> cpn_obj.component_name.lower() == <span class="hljs-string">&quot;iteration&quot;</span>:<br>                    <span class="hljs-comment"># 取到这个迭代的第一个子节点（get_start()），把它加入路径，开始循环的第一次迭代。</span><br>                    _append_path(cpn_obj.get_start())<br>                <span class="hljs-comment"># 如果当前节点 没有下游节点，但是它有一个父节点：</span><br>                <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> cpn[<span class="hljs-string">&quot;downstream&quot;</span>] <span class="hljs-keyword">and</span> cpn_obj.get_parent():<br>                    <span class="hljs-comment"># 那么跳回到父节点的 get_start()，也就是重新回到父节点的循环开始处。</span><br>                    <span class="hljs-comment"># 用在 迭代还没结束，需要继续下一个元素 的情况。</span><br>                    _append_path(cpn_obj.get_parent().get_start())<br>                <span class="hljs-keyword">else</span>:<br>                    _extend_path(cpn[<span class="hljs-string">&quot;downstream&quot;</span>])<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.error:<br>                logging.error(<span class="hljs-string">f&quot;Runtime Error: <span class="hljs-subst">&#123;self.error&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">break</span><br>            idx = to<br><br>            <span class="hljs-comment"># 检查从当前位置 idx 开始的执行路径里，是否还有 userfillup 节点。</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>([<span class="hljs-variable language_">self</span>.get_component_obj(c).component_name.lower() == <span class="hljs-string">&quot;userfillup&quot;</span> <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.path[idx:]]):<br>                <span class="hljs-comment"># 如果有，那么把 userfillup 之前的节点都执行完，然后把 userfillup 加入路径，继续执行,这个就进入这个分支。</span><br>                <span class="hljs-comment"># 把 userfillup 节点 提前到路径的最前面，后面跟着其它节点。</span><br>                <span class="hljs-comment"># 也就是说：优先处理所有用户输入的节点。</span><br>                path = [c <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.path[idx:] <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.get_component(c)[<span class="hljs-string">&quot;obj&quot;</span>].component_name.lower() == <span class="hljs-string">&quot;userfillup&quot;</span>]<br>                path.extend([c <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.path[idx:] <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.get_component(c)[<span class="hljs-string">&quot;obj&quot;</span>].component_name.lower() != <span class="hljs-string">&quot;userfillup&quot;</span>])<br>                another_inputs = &#123;&#125;<br>                tips = <span class="hljs-string">&quot;&quot;</span><br><br>                <span class="hljs-comment">#遍历路径，找到所有 userfillup 节点：</span><br>                <span class="hljs-comment"># 收集它们的 输入元素（get_input_elements()，可能是表单字段、参数等），放到 another_inputs 里。</span><br>                <span class="hljs-comment"># 如果该节点设置了提示信息（enable_tips），就取出 tips。</span><br>                <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> path:<br>                    o = <span class="hljs-variable language_">self</span>.get_component_obj(c)<br>                    <span class="hljs-keyword">if</span> o.component_name.lower() == <span class="hljs-string">&quot;userfillup&quot;</span>:<br>                        another_inputs.update(o.get_input_elements())<br>                        <span class="hljs-keyword">if</span> o.get_param(<span class="hljs-string">&quot;enable_tips&quot;</span>):<br>                            tips = o.get_param(<span class="hljs-string">&quot;tips&quot;</span>)<br>                <span class="hljs-variable language_">self</span>.path = path<br>                <span class="hljs-keyword">yield</span> decorate(<span class="hljs-string">&quot;user_inputs&quot;</span>, &#123;<span class="hljs-string">&quot;inputs&quot;</span>: another_inputs, <span class="hljs-string">&quot;tips&quot;</span>: tips&#125;)<br>                <span class="hljs-keyword">return</span><br><br>        <span class="hljs-comment"># 把 self.path 截断到已经执行过的部分（idx 之前的）</span><br>        <span class="hljs-variable language_">self</span>.path = <span class="hljs-variable language_">self</span>.path[:idx]<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.error:<br>            <span class="hljs-keyword">yield</span> decorate(<span class="hljs-string">&quot;workflow_finished&quot;</span>,<br>                       &#123;<br>                           <span class="hljs-string">&quot;inputs&quot;</span>: kwargs.get(<span class="hljs-string">&quot;inputs&quot;</span>),<br>                           <span class="hljs-string">&quot;outputs&quot;</span>: <span class="hljs-variable language_">self</span>.get_component_obj(<span class="hljs-variable language_">self</span>.path[-<span class="hljs-number">1</span>]).output(),<br>                           <span class="hljs-string">&quot;elapsed_time&quot;</span>: time.perf_counter() - st,<br>                           <span class="hljs-string">&quot;created_at&quot;</span>: st,<br>                       &#125;)<br>            <span class="hljs-variable language_">self</span>.history.append((<span class="hljs-string">&quot;assistant&quot;</span>, <span class="hljs-variable language_">self</span>.get_component_obj(<span class="hljs-variable language_">self</span>.path[-<span class="hljs-number">1</span>]).output()))<br><br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">invoke</span>(<span class="hljs-params">self, **kwargs</span>) -&gt; <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]:<br>        <span class="hljs-variable language_">self</span>.set_output(<span class="hljs-string">&quot;_created_time&quot;</span>, time.perf_counter())<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-variable language_">self</span>._invoke(**kwargs)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.get_exception_default_value():<br>                <span class="hljs-variable language_">self</span>.set_exception_default_value()<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-variable language_">self</span>.set_output(<span class="hljs-string">&quot;_ERROR&quot;</span>, <span class="hljs-built_in">str</span>(e))<br>            logging.exception(e)<br>        <span class="hljs-variable language_">self</span>._param.debug_inputs = &#123;&#125;<br>        <span class="hljs-variable language_">self</span>.set_output(<span class="hljs-string">&quot;_elapsed_time&quot;</span>, time.perf_counter() - <span class="hljs-variable language_">self</span>.output(<span class="hljs-string">&quot;_created_time&quot;</span>))<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.output()<br><br><span class="hljs-meta">    @timeout(<span class="hljs-params">os.environ.get(<span class="hljs-params"><span class="hljs-string">&quot;COMPONENT_EXEC_TIMEOUT&quot;</span>, <span class="hljs-number">10</span>*<span class="hljs-number">60</span></span>)</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_invoke</span>(<span class="hljs-params">self, **kwargs</span>):<br>        <span class="hljs-keyword">raise</span> NotImplementedError()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大模型框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大模型框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ragflow0.20.4</title>
    <link href="/2025/09/06/Ragflow0.20.4/"/>
    <url>/2025/09/06/Ragflow0.20.4/</url>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><code>uv sync --python 3.10 --all-extras # install RAGFlow dependent python modules</code></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>uv sync<br><span class="hljs-code">    uv 的「同步」子命令：</span><br><span class="hljs-code">    读取项目根目录下的 pyproject.toml（或 uv.lock）</span><br><span class="hljs-code">    自动创建/复用虚拟环境</span><br><span class="hljs-code">    把声明的依赖一次性装进去，并保证版本完全锁死</span><br><span class="hljs-code">    如果环境里有多余的包，还会自动卸载，保持“干净”</span><br></code></pre></td></tr></table></figure><ul><li>–all-extras</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">把 pyproject.toml 里所有 [<span class="hljs-keyword">project</span>.optional-<span class="hljs-keyword">dependencies</span>] 定义的可选依赖组全部装上。<br>RAGFlow 把这些可选包用来支持不同嵌入模型、PDF 解析器、向量库等，所以必须一次性装全，否则运行时会缺模块。<br></code></pre></td></tr></table></figure><h3 id="部署错误"><a href="#部署错误" class="headerlink" title="部署错误"></a>部署错误</h3><p><code>RAGFlow 依赖的 pyicu 在 Windows 上编译失败，因为找不到 ICU 开发库。</code></p><ul><li>先装预编译的 pyicu wheel，避开编译;装完后重新同步<br><code>conda install -c conda-forge icu pyicu</code><br>从 conda-forge 频道安装 ICU 和 PyICU 两个包。</li></ul><h1 id="解析字"><a href="#解析字" class="headerlink" title="解析字"></a>解析字</h1><p><strong>WSL</strong> 是 Windows Subsystem for Linux（适用于 Linux 的 Windows 子系统）。 允许用户在 不安装虚拟机或双系统 的情况下，直接在 Windows 上运行 原生 Linux 二进制可执行文件（ELF 格式）。</p><p><strong>文件挂载</strong>：“挂载”就是把某个外部存储或文件夹，‘嫁接’到当前系统的目录树上，让你随时随地在 Linux 环境里像本地文件一样使用它。</p><h3 id="ubuntu-linux关系"><a href="#ubuntu-linux关系" class="headerlink" title="ubuntu linux关系"></a>ubuntu linux关系</h3><table><thead><tr><th>类比对象</th><th>对应关系</th></tr></thead><tbody><tr><td>汽车引擎</td><td>Linux 内核</td></tr><tr><td>整车（引擎+车身+轮子+方向盘）</td><td>Ubuntu 操作系统</td></tr><tr><td>不同品牌的车（宝马、丰田）</td><td>不同发行版（Ubuntu、Fedora、Debian）</td></tr></tbody></table><h1 id="WSL2-Windows-Subsystem-for-Linux-Ubuntu-部署-RAGFlow"><a href="#WSL2-Windows-Subsystem-for-Linux-Ubuntu-部署-RAGFlow" class="headerlink" title="WSL2 (Windows Subsystem for Linux) + Ubuntu 部署 RAGFlow"></a>WSL2 (Windows Subsystem for Linux) + Ubuntu 部署 RAGFlow</h1><h3 id="wsl安装ubuntu错误"><a href="#wsl安装ubuntu错误" class="headerlink" title="wsl安装ubuntu错误"></a>wsl安装ubuntu错误</h3><p><code>/set hypervisorlaunchtype Auto</code></p><h3 id="检查python版本"><a href="#检查python版本" class="headerlink" title="检查python版本"></a>检查python版本</h3><p>✅python3 –version</p><h3 id="uv写入环境变量"><a href="#uv写入环境变量" class="headerlink" title="uv写入环境变量"></a>uv写入环境变量</h3><p><code>echo &#39;export PATH=$HOME/.local/bin:$PATH&#39; &gt;&gt; ~/.bashrc</code><br><code>source ~/.bashrc</code></p><h3 id="Downloading-huggingface-repo-BAAI-bge-large-zh-v1-5-下载失败"><a href="#Downloading-huggingface-repo-BAAI-bge-large-zh-v1-5-下载失败" class="headerlink" title="Downloading huggingface repo BAAI&#x2F;bge-large-zh-v1.5.下载失败"></a>Downloading huggingface repo BAAI&#x2F;bge-large-zh-v1.5.下载失败</h3><p><code>修改的环境变量不生效，因为代码用的是 huggingface_hub.snapshot_download它默认是去 https://huggingface.co拉模型，不会自动走你上面设置的镜像。所以即使你在系统里设置了 HF_ENDPOINT，它也可能不生效（因为这里写死了 repo_id 但没传 endpoint 参数）</code><br>✅ 解决方法一：强制指定镜像 endpoint </p><ul><li>改 download_model 函数，加一个 endpoint 参数：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_model</span>(<span class="hljs-params">repo_id</span>):<br>    local_dir = os.path.abspath(os.path.join(<span class="hljs-string">&quot;huggingface.co&quot;</span>, repo_id))<br>    os.makedirs(local_dir, exist_ok=<span class="hljs-literal">True</span>)<br>    snapshot_download(<br>        repo_id=repo_id,<br>        local_dir=local_dir,<br>        endpoint=os.environ.get(<span class="hljs-string">&quot;HF_ENDPOINT&quot;</span>, <span class="hljs-string">&quot;https://huggingface.co&quot;</span>)  <span class="hljs-comment"># 强制使用镜像</span><br>    )<br><br></code></pre></td></tr></table></figure><h3 id="wsl-检测到-localhost-代理配置，但未镜像到-WSL。NAT-模式下的-WSL-不支持-localhost-代理。"><a href="#wsl-检测到-localhost-代理配置，但未镜像到-WSL。NAT-模式下的-WSL-不支持-localhost-代理。" class="headerlink" title="wsl: 检测到 localhost 代理配置，但未镜像到 WSL。NAT 模式下的 WSL 不支持 localhost 代理。"></a>wsl: 检测到 localhost 代理配置，但未镜像到 WSL。NAT 模式下的 WSL 不支持 localhost 代理。</h3><p>✅在你的windows的C:\Users&lt;your_username&gt;目录下面创建一个.wslconfig文件，往里面写入下面代码</p><p>[experimental]<br>autoMemoryReclaim&#x3D;gradual<br>networkingMode&#x3D;mirrored<br>dnsTunneling&#x3D;true<br>firewall&#x3D;true<br>autoProxy&#x3D;true</p><h3 id="malloc-是一个-内存分配器（memory-allocator）"><a href="#malloc-是一个-内存分配器（memory-allocator）" class="headerlink" title="malloc 是一个 内存分配器（memory allocator）"></a>malloc 是一个 内存分配器（memory allocator）</h3><p>✅ jemalloc 是高性能、低碎片、支持多线程的内存分配器，常用于高并发、大内存应用。</p><h3 id="项目进入虚拟环境"><a href="#项目进入虚拟环境" class="headerlink" title="项目进入虚拟环境"></a>项目进入虚拟环境</h3><p>source .venv&#x2F;bin&#x2F;activate</p><h3 id="npm-install下载慢"><a href="#npm-install下载慢" class="headerlink" title="npm install下载慢"></a>npm install下载慢</h3><ul><li>1.换镜像源</li><li>2.npm install –no-audit –prefer-offline<table><thead><tr><th>flag</th><th>作用</th></tr></thead><tbody><tr><td><code>--no-audit</code></td><td><strong>跳过 <code>npm audit</code> 安全检测</strong>。不扫描漏洞、不下载漏洞库，省 3-10 秒，也避免公司代理&#x2F;网络差时 audit 请求卡死。</td></tr><tr><td><code>--prefer-offline</code></td><td><strong>优先用本地缓存</strong>。只要机器里曾经下过某个包，就直接从 <code>~/.npm/_cacache</code> 拿，不再去网络校验，省流量、省时间，离线也能装。</td></tr></tbody></table></li></ul><h3 id="wsl无法解析镜像源"><a href="#wsl无法解析镜像源" class="headerlink" title="wsl无法解析镜像源"></a>wsl无法解析镜像源</h3><p>立刻锁掉 WSL 自动生成，防止重启被覆盖<br>wsl –shutdown<br>notepad “$env:USERPROFILE.wslconfig”<br>写入：<br>[network]<br>generateResolvConf &#x3D; false<br>保存后启动 WSL：<br>wsl</p><h2 id="docker-compose-f-docker-docker-compose-base-yml-up-d"><a href="#docker-compose-f-docker-docker-compose-base-yml-up-d" class="headerlink" title="docker compose -f docker&#x2F;docker-compose-base.yml up -d\"></a>docker compose -f docker&#x2F;docker-compose-base.yml up -d\</h2><p><strong>按照指定的 YAML 文件，把一整套 Docker 容器在后台跑起来</strong></p><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><ul><li>source .venv&#x2F;bin&#x2F;activate</li><li>export PYTHONPATH&#x3D;$(pwd)</li><li>bash docker&#x2F;launch_backend_service.sh</li></ul><h1 id="bash-docker-launch-backend-service-sh-进入虚拟环境后其实只需执行这条命令"><a href="#bash-docker-launch-backend-service-sh-进入虚拟环境后其实只需执行这条命令" class="headerlink" title="bash docker&#x2F;launch_backend_service.sh     进入虚拟环境后其实只需执行这条命令"></a>bash docker&#x2F;launch_backend_service.sh     进入虚拟环境后其实只需执行这条命令</h1><p><em><strong>bash docker&#x2F;launch_backend_service.sh &#x3D; 运行项目提供的“一键起后端”脚本；大概率帮你 build + up 所有后端容器，并等它们就绪。</strong></em></p><h3 id="8-Killed-PY-api-ragflow-server-py-启动被杀进程"><a href="#8-Killed-PY-api-ragflow-server-py-启动被杀进程" class="headerlink" title="8 Killed  $PY api&#x2F;ragflow_server.py    启动被杀进程"></a>8 Killed  $PY api&#x2F;ragflow_server.py    启动被杀进程</h3><p> ✅ 解决方案（4G 机器可行的做法）</p><ol><li>降低 Elasticsearch 的 JVM Heap<br>在 docker-compose.yml（或者 launch_backend_service.sh 里对应的 compose 文件）里，给 ES 加上：</li></ol><p>  elasticsearch:<br>    environment:<br>      - discovery.type&#x3D;single-node<br>      - ES_JAVA_OPTS&#x3D;-Xms256m -Xmx512m</p><h2 id="开发完成后期RAGFlow-前端和支架服务："><a href="#开发完成后期RAGFlow-前端和支架服务：" class="headerlink" title="开发完成后期RAGFlow 前端和支架服务："></a>开发完成后期RAGFlow 前端和支架服务：</h2><p>&#x2F;<em>pkill -f “ragflow_server.py|task_executor.py”</em>&#x2F;</p><h1 id="前端启动失败-tailwindcss-generate-failed-after-5-seconds-please-check-your-tailwind-css-and-tailwind-config-js"><a href="#前端启动失败-tailwindcss-generate-failed-after-5-seconds-please-check-your-tailwind-css-and-tailwind-config-js" class="headerlink" title="前端启动失败 tailwindcss generate failed after 5 seconds, please check your tailwind.css and tailwind.config.js"></a><strong>前端启动失败</strong> tailwindcss generate failed after 5 seconds, please check your tailwind.css and tailwind.config.js</h1><ul><li>方法 1：临时设置环境变量（只在当前命令有效）<br>在项目根目录下执行：<br>export CHECK_TIMEOUT&#x3D;20<br>npm run dev<br>export CHECK_TIMEOUT&#x3D;20：把超时时间设置为 20 秒。<br>npm run dev：启动你的开发服务器（或者 Tailwind 编译命令）。<br>这个方式只在当前终端有效，关闭终端就失效。</li></ul><p>-方法 2：在项目 .env 文件里永久生效<br>在项目根目录创建或编辑 .env 文件：<br>nano .env<br>在文件里添加：<br>CHECK_TIMEOUT&#x3D;20<br>保并退出（在 nano 里按 Ctrl+O → Enter → Ctrl+X）。<br>安装 dotenv（如果你的项目还没安装）：<br>npm install dotenv –save<br>在项目入口文件最上面添加：<br>require(‘dotenv’).config();<br>启动项目：<br>npm run dev<br>✅ 这样每次启动，CHECK_TIMEOUT 都是 20 秒，无需手动 export。</p><h3 id="✘-sandbox-executor-manager-Error-Get-“https-r…-15-4s"><a href="#✘-sandbox-executor-manager-Error-Get-“https-r…-15-4s" class="headerlink" title="✘ sandbox-executor-manager Error Get “https://r…                                15.4s"></a>✘ sandbox-executor-manager Error Get “<a href="https://r/">https://r</a>…                                15.4s</h3><!-- Error response from daemon: Get "https://registry-1.docker.io/v2/": net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers) -->]]></content>
    
    
    <categories>
      
      <category>大模型框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大模型框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Scrapy</title>
    <link href="/2025/09/02/requests%E5%BA%93/"/>
    <url>/2025/09/02/requests%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests   <span class="hljs-comment">#加载requests模块</span><br>r = requests.get(<span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>) <span class="hljs-comment">#爬取url的网址信息</span><br><span class="hljs-built_in">print</span>(r.status_code)   <span class="hljs-comment">#查看状态200为正常，404为错误</span><br>r.headers                <span class="hljs-comment">#获得头部信息</span><br></code></pre></td></tr></table></figure><h2 id="response对象的属性"><a href="#response对象的属性" class="headerlink" title="response对象的属性"></a>response对象的属性</h2><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>r.status_code</code></td><td>HTTP 请求的返回状态</td></tr><tr><td><code>r.text</code></td><td>HTTP 响应内容的字符串形式，即 URL 对应页面的文本内容</td></tr><tr><td><code>r.encoding</code></td><td>从 HTTP header 中推测的响应内容编码方式</td></tr><tr><td><code>r.apparent_encoding</code></td><td>从内容中分析出的响应内容编码方式（备选编码方式）</td></tr><tr><td><code>r.content</code></td><td>HTTP 响应内容的二进制形式</td></tr></tbody></table><h2 id="使用-re-模块匹配字符串"><a href="#使用-re-模块匹配字符串" class="headerlink" title="使用 re 模块匹配字符串"></a>使用 re 模块匹配字符串</h2><ul><li>使用 match() 方法进行匹配<br>  match() 方法用于从字符串的开始处进行匹配，如果在起始位置匹配成功，则返回 Match 对象，否则返回 None。其语法格式如下：(一旦当第一个字母不符合条件时，则不再进行匹配)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">re.<span class="hljs-keyword">match</span>(pattern, string, [flags])<br></code></pre></td></tr></table></figure><p><code>pattern：表示模式字符串，由要匹配的正则表达式转换而来。string：表示要匹配的字符串。</code></p><ul><li>使用 search() 方法进行匹配<br>  search() 方法用于在整个字符串中搜索第一个匹配的值，如果匹配成功，则返回 Match 对象，否则返回 None。search() 方法的语法格式如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">re.search(pattern, string, [flags])<br></code></pre></td></tr></table></figure><ul><li>使用 findall() 方法进行匹配<br>  在整个字符串中搜索所有符合正则表达式的字符串，并以列表的形式返回所有符合条件的结果。如果匹配不成功，返回空列表。findall() 方法的语法格式如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">re.findall(pattern, string, [flags])<br></code></pre></td></tr></table></figure><h2 id="使用-re-模块替换字符串"><a href="#使用-re-模块替换字符串" class="headerlink" title="使用 re 模块替换字符串"></a>使用 re 模块替换字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">re.sub(pattern, repl, string, count, flags)<br></code></pre></td></tr></table></figure><p><code>pattern：表示模式字符串，要被替换的。repl：用来替换的字符串。string：表示要被查找替换的原始字符串。count：可选参数，表示模式匹配后替换的最大次数，默认值为 0，表示替换所有的匹配。flags：可选参数，表示标志位，用于控制匹配方式，如是否区分字母大小写、是否包括换行等等。</code></p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><code>“^” 表示行的开始，“$” 表示行的结尾</code></p><table><thead><tr><th>元字符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td><code>.</code></td><td>匹配除换行符以外的任意字符</td><td><code>a.c</code> 可匹配“acdin8Rit”中的 <code>a、c、d、8、R、it</code></td></tr><tr><td><code>\w</code></td><td>匹配字母、数字、下划线或汉字</td><td><code>\w</code> 可匹配“miO次9inqw”中的 <code>m、i、O、次、9、q、w</code>，不能匹配空格</td></tr><tr><td><code>\W</code></td><td>匹配除 <code>\w</code> 以外的字符</td><td><code>\W</code> 可匹配“92dinsc”中的 <code>in</code>，不能匹配 <code>9、2、d、s、c</code></td></tr><tr><td><code>\s</code></td><td>匹配单个空白符（包括 Tab 和换行）</td><td><code>\s</code> 可匹配“c\t8B”中的 <code>\t</code></td></tr><tr><td><code>\S</code></td><td>匹配除空白符以外的所有字符</td><td><code>\S</code> 可匹配“字we2it90”中的 <code>字、w、e、2、9、0</code></td></tr><tr><td><code>\b</code></td><td>匹配单词边界（开始或结束）</td><td>在“there were deserts where”中，<code>\bw</code> 匹配 <code>were</code> 的 <code>w</code>，不匹配 <code>where</code> 的 <code>w</code></td></tr><tr><td><code>\d</code></td><td>匹配数字</td><td><code>\d</code> 可匹配“dg34&amp;”中的 <code>3、4</code></td></tr></tbody></table><p>常用元字符<br>字符描述实例试一试<br>[]一组字符“[a-m]”<br>\示意特殊序列（也可用于转义特殊字符）“\d”<br>.任何字符（换行符除外）“he..o”<br>^起始于“^hello”<br>$结束于“world$”<br>*零次或多次出现“aix*”<br>+一次或多次出现“aix+”<br>{}确切地指定的出现次数“al{2}”<br><code></code>两者任一<code>&quot;fallsstays&quot;</code><br>特殊序列<br>字符描述实例<br>\A如果指定的字符位于字符串的开头，则返回匹配项“\AThe”<br>\b返回指定字符位于单词的开头或末尾的匹配项r”\bain”, r”ain\b”<br>\B返回指定字符存在的匹配项，但不在单词的开头（或结尾处）r”\Bain”, r”ain\B”<br>\d返回字符串包含数字的匹配项（数字 0-9）“\d”<br>\D返回字符串不包含数字的匹配项“\D”<br>\s返回字符串包含空白字符的匹配项“\s”<br>\S返回字符串不包含空白字符的匹配项“\S”<br>\w返回一个匹配项，其中字符串包含任何单词字符（a-z, A-Z, 0-9, _）“\w”<br>\W返回一个匹配项，其中字符串不包含任何单词字符“\W”<br>\Z如果指定的字符位于字符串的末尾，则返回匹配项“Spain\Z”<br>集合<br>表达式描述<br>[arn]返回一个匹配项，其中存在指定字符（a, r 或 n）之一<br>[a-n]返回字母顺序 a 和 n 之间的任意小写字符匹配项<br>[^arn]返回除 a、r 和 n 之外的任意字符的匹配项<br>[0123]返回存在任何指定数字（0、1、2 或 3）的匹配项<br>[0-9]返回 0 与 9 之间任意数字的匹配<br>[0-5][0-9]返回介于 0 到 9 之间的任何数字的匹配项<br>[a-zA-Z]返回字母顺序 a 和 z 之间的任何字符的匹配，小写或大写<br>[+]在集合中，+, *, ., <code>, (), $, &#123;&#125;没有特殊含义，因此[+]表示返回字符串中任何+</code> 字符的匹配项<br>正则函数<br>findall() 函数返回包含所有匹配项的列表。</p><p>search() 函数搜索字符串中的匹配项，如果存在匹配则返回 Match 对象。如果有多个匹配，则仅返回首个匹配项。</p><p>sub() 函数把匹配替换为您选择的文本。</p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>study</title>
    <link href="/2025/08/21/study/"/>
    <url>/2025/08/21/study/</url>
    
    <content type="html"><![CDATA[<h1 id="RAGFLOW"><a href="#RAGFLOW" class="headerlink" title="RAGFLOW"></a>RAGFLOW</h1><h2 id="什么是RAGFLOW"><a href="#什么是RAGFLOW" class="headerlink" title="什么是RAGFLOW"></a>什么是RAGFLOW</h2><p><a href="https://ragflow.io/">RAGFlow</a> 是一个基于深度文档理解的开源 RAG（检索增强生成）引擎。它为任何规模的企业提供了简化的 RAG 工作流程，结合了 LLM（大型语言模型）提供真实的问答功能，并以来自各种复杂格式的有根据的引文为后盾。</p><p><strong>SDK</strong> 是 <strong>Software Development Kit</strong>（<strong>软件开发工具包</strong>）的缩写，中文通常称“开发工具包”，用于开发特定平台或软件应用的工具集合。</p><h3 id="Integrations"><a href="#Integrations" class="headerlink" title="Integrations"></a>Integrations</h3><blockquote><p><code>integrations</code> 目录中 RAGFlow 与 ChatGPT-on-WeChat 对接。</p></blockquote><h3 id="NLTK"><a href="#NLTK" class="headerlink" title="NLTK"></a>NLTK</h3><blockquote><p>NLTK 是 Natural Language Toolkit（自然语言处理工具包）</p></blockquote><ul><li><strong>文本分词</strong>（tokenization）</li><li><strong>词性标注</strong>（POS tagging）</li><li><strong>命名实体识别</strong>（NER）</li><li><strong>句法分析</strong>（parsing）</li></ul><h3 id="uv-lock-Python项目的依赖组件"><a href="#uv-lock-Python项目的依赖组件" class="headerlink" title="uv.lock Python项目的依赖组件"></a>uv.lock Python项目的依赖组件</h3><p><a href="https://zhuanlan.zhihu.com/p/1893299536002261393%20%20ragFlow">https://zhuanlan.zhihu.com/p/1893299536002261393 RAGFlow</a> 项目结构</p><p><strong>Werkzeug</strong>：Werkzeug 是一个纯 Python 编写的 WSGI 工具库，由 Flask 的核心开发者（Pallets 团队）维护。它的定位是：“HTTP 和 WSGI 的瑞士军刀”，提供构建 Web 框架&#x2F;服务器所需的各种底层功能，但本身不是一个完整的 Web 框架。</p><p>SIGINT：信息获取，SIGTERM：关闭。</p><p>WSGI：的全称是 <strong>Web Server Gateway Interface</strong>（Web 服务器网关接口）。一句话概括：<strong>它是 Python Web 应用（或框架）与 Web 服务器之间的“通用翻译官”</strong>。</p><p><strong>Node.js（简称 node）</strong> 是让你在浏览器之外也能运行 JavaScript 的“发动机”。运行 JavaScript 代码不用浏览器，直接在命令行。</p><p><strong>JavaScript</strong> 是让网页从“静态海报”变成“交互应用”的魔法语言，现在更是前后端通吃的万能胶水。</p><p><strong>构造函数</strong>：在 Python 中，构造函数的名字总是 <code>__init__</code>，是<strong>在创建对象时自动调用的特殊方法</strong>，用于初始化对象的状态（属性）。</p><p><code>dir()</code> 是 Python 的一个内置函数，作用是<strong>列出对象的属性和方法名称</strong>。</p><p><code>setattr</code> 是 Python 内置函数，用于<strong>给对象动态地设置属性值</strong>。<code>setattr(object, name, value)</code></p><p><code>__dict__</code>：实例属性，你创建一个类的实例后，实例的属性就会被存放在 <code>__dict__</code> 中。</p><p><strong>双下划线</strong>（dunder，double underscore）的函数，在 Python 里统称为**“魔术方法 &#x2F; 特殊方法”**。它们不让你直接调用，而是由 <strong>Python 解释器在特定场景下自动触发</strong>，用来定义对象的核心行为。</p><p><strong>三引号</strong>：就是“多行字符串”，至于拿来干什么，取决于它放在哪里。</p><ul><li><strong>当放在模块、类、函数或方法的第一行</strong> —— 它就是文档字符串（docstring），通过 <code>help(func)</code> 或 <code>func.__doc__</code> 能拿到这段说明。</li><li><strong>当放在赋值语句右边</strong> —— 它就是普通字符串，只是跨行写起来更方便。</li><li><strong>当放在代码里但既不赋值也不当 docstring</strong> —— 它就只是被忽略的字符串常量。</li></ul><hr><h2 id="JSON-处理"><a href="#JSON-处理" class="headerlink" title="JSON 处理"></a>JSON 处理</h2><p>✅ <code>json.dumps(obj)</code>：<strong>Python → JSON 字符串</strong><br>✅ <code>json.loads(json_str)</code>：<strong>JSON 字符串 → Python 对象（通常是字典）</strong>。</p><hr><h2 id="Python-命名约定"><a href="#Python-命名约定" class="headerlink" title="Python 命名约定"></a>Python 命名约定</h2><p>在 Python 中，变量名前加下划线（例如 <code>_param</code>）<strong>是一种约定，表示这是一个“内部变量”或“私有属性”</strong>。</p><p>Python 函数在调用时必须已经先定义在调用上方，函数内调用不分先后。</p><hr><h2 id="集合与生成器"><a href="#集合与生成器" class="headerlink" title="集合与生成器"></a>集合与生成器</h2><p>🟢 <code>set([])</code> 是什么意思？创建空集合。</p><p><code>yield</code> 是一个用于**生成器函数（generator function）**的关键字，可以让函数一次返回一个值，同时记住上次执行的位置。边执行边产出。“暂停一下，先给你一条消息，等你处理完了我再继续往下走。”</p><h3 id="🧠-yield-与-return-的区别"><a href="#🧠-yield-与-return-的区别" class="headerlink" title="🧠 yield 与 return 的区别"></a>🧠 yield 与 return 的区别</h3><table><thead><tr><th><strong>比较项</strong></th><th><strong>return</strong></th><th><strong>yield</strong></th></tr></thead><tbody><tr><td>函数类型</td><td>普通函数</td><td>生成器函数（返回生成器对象）</td></tr><tr><td>返回行为</td><td>一次性返回，函数结束</td><td>暂停函数，保留状态，下次继续</td></tr><tr><td>可多次输出？</td><td>否，一次</td><td>是，多次（使用 for 或 next()）</td></tr><tr><td>内存效率</td><td>不高（返回整个列表等）</td><td>高效（按需生成，每次一个值）</td></tr></tbody></table><hr><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>✅ 一句话解释：<code>try-except-raise</code> 用于：</p><ul><li><strong>捕获异常</strong>（<code>try</code>）：可能出错的代码</li><li><strong>做出处理</strong>（<code>except</code>）：先处理一下，比如打印日志</li><li><strong>重新抛出异常</strong>（<code>raise</code>），让它传给外部或中止程序</li></ul><hr><h2 id="切片与装饰器"><a href="#切片与装饰器" class="headerlink" title="切片与装饰器"></a>切片与装饰器</h2><ul><li><code>[::-1]</code> 是 Python 的切片语法，用于反转序列：<ul><li>第一个 <code>:</code> 表示从开始到结束</li><li>第二个 <code>:</code> 后是步长（step），<code>-1</code> 表示从后向前遍历</li></ul></li></ul><p><code>@property</code> 装饰器将方法伪装成属性。用户像操作属性一样使用（无需显式调用方法）。</p><p><code>@</code> 是<strong>装饰器（Decorator）语法</strong>的标志，用于<strong>包装函数、方法或类</strong>，在不改变其原始定义的前提下，增强或修改其行为。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@decorator</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-keyword">pass</span><br>等价于：<br><br>python<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-keyword">pass</span><br>func = decorator(func)<br></code></pre></td></tr></table></figure><p>装饰器（Decorator）就是一个“包装函数”，在不修改原函数代码的前提下，给它加功能。</p><p>✅ 举个生活例子：<br>你点了一杯奶茶，店员在封口前又给你加了层奶盖 —— 这就是“装饰”：奶茶（原函数）没变，但多了奶盖（新功能）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">login_required</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-keyword">if</span> session.get(<span class="hljs-string">&#x27;username&#x27;</span>):<br>            <span class="hljs-keyword">return</span> func(*args, **kwargs)  <span class="hljs-comment"># 用户已登录，正常执行原函数</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;请先登录！&#x27;</span>  <span class="hljs-comment"># 未登录，拦截请求</span><br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/profile&#x27;</span></span>)</span><br><span class="hljs-meta">@login_required  </span><span class="hljs-comment"># 👈 装饰器：给 /profile 加“登录检查”功能</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">profile</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;个人中心页面&#x27;</span><br></code></pre></td></tr></table></figure><p>req &#x3D; request.json 是 Flask 中获取请求体中的 JSON 数据的一种方式。</p><p>nonlocal 是 Python 中的一个关键字，用于在嵌套函数中声明一个变量不是局部变量，而是来自外层（非全局）作用域的变量。</p><p>后端路由定位<br>根据 URL 定位后端路由：</p><p>框架搜索关键词示例路由定义示例<br>Spring Boot@PostMapping(“&#x2F;v1&#x2F;chunk&#x2F;list”) 或 @RequestMapping@PostMapping(“&#x2F;v1&#x2F;chunk&#x2F;list”)<br>数据库索引<br>KEY devparamtemplate_create_time (create_time)：这些语句是给表里的字段加普通索引（KEY），作用是为了提高查询速度，但不会限制字段值唯一。</p><p>类型作用是否防重复<br>KEY 或 INDEX提升查询性能❌ 不限制重复<br>UNIQUE KEY防重复值 + 提升查询性能✅ 限制重复<br>ORM 模型示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DevParamTemplate</span>(<span class="hljs-title class_ inherited__">DataBaseModel</span>):<br>    <span class="hljs-built_in">id</span> = CharField(max_length=<span class="hljs-number">32</span>, primary_key=<span class="hljs-literal">True</span>)<br>    name = CharField(max_length=<span class="hljs-number">100</span>, null=<span class="hljs-literal">False</span>, help_text=<span class="hljs-string">&quot;模板名称&quot;</span>, index=<span class="hljs-literal">True</span>)<br>    agent_id = CharField(max_length=<span class="hljs-number">64</span>, null=<span class="hljs-literal">True</span>, help_text=<span class="hljs-string">&quot;关联的agentID&quot;</span>, index=<span class="hljs-literal">True</span>)<br>    auth = CharField(max_length=<span class="hljs-number">255</span>, null=<span class="hljs-literal">True</span>, help_text=<span class="hljs-string">&quot;授权信息&quot;</span>)<br>    template = TextField(null=<span class="hljs-literal">True</span>, help_text=<span class="hljs-string">&quot;参数模板内容&quot;</span>, default=<span class="hljs-built_in">list</span>)<br>    status = CharField(max_length=<span class="hljs-number">1</span>, null=<span class="hljs-literal">True</span>, default=<span class="hljs-string">&quot;1&quot;</span>, help_text=<span class="hljs-string">&quot;状态 1是开启 0是关闭&quot;</span>, index=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        db_table = <span class="hljs-string">&quot;dev_param_template&quot;</span><br></code></pre></td></tr></table></figure><p>Index&#x3D;True 表示为这个字段创建普通索引（提高查询速度，但不会防止重复值）。</p><p>场景HTTP 状态码业务返回码（示例）<br>请求成功200code&#x3D;0<br>参数错误400code&#x3D;100<br>权限不足200（或 403）code&#x3D;401<br>服务器异常500code&#x3D;500</p><h3 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h3><p>Controller（控制器）层</p><ul><li>像前台接待员：只负责“收快递”（接收 HTTP 请求参数）把快递交给后台仓库（Service 层）再把仓库返回的结果打包发回给客人（返回 JSON 给前端）<br><code>一句话：不处理业务逻辑，只做“收、转、返”。</code><br>Service（业务）层</li><li>像后台仓库：真正拆包裹、检查货物（参数校验、业务规则）决定能不能入库（判断名称是否重复）把最终入库单交给工人（DAO &#x2F; ORM）去落库<br><code>一句话：所有“能不能做、该怎么做”的判断都在这里。</code></li></ul><h2 id="MVC-分层结构"><a href="#MVC-分层结构" class="headerlink" title="MVC &#x2F; 分层结构"></a>MVC &#x2F; 分层结构</h2><p>就是把代码按职责切成三层（或更多层）：</p><ul><li>M Model（数据模型，对应数据库表）</li><li>V View（前端页面 &#x2F; JSON 视图）</li><li>C Controller（上面说的前台接待员）</li><li>S Service（后台仓库）<br>好处：各层互不干扰，代码好维护、好测试、好复用。</li></ul><p>Jenkins 与 CI&#x2F;CD<br>Jenkins 是一个开源的、提供友好操作界面的持续集成（CI）工具，起源于 Hudson，主要用于持续、自动的构建&#x2F;测试软件项目。</p><h3 id="CI-CD-是什么？"><a href="#CI-CD-是什么？" class="headerlink" title="CI&#x2F;CD 是什么？"></a>CI&#x2F;CD 是什么？</h3><ul><li>CI（Continuous Integration，持续集成）：一种软件开发实践。持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。</li><li>CD（Continuous Delivery，持续交付）：是在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境（类生产环境）中。比如，我们完成单元测试后，可以把代码部署到连接数据库的 Staging 环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境。</li></ul><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><p>功能说明<br>接收浏览器请求别人输入网址，Tomcat 听见“有人敲门”<br>把你的代码跑起来它帮你把 Java 代码变成网页，回给浏览器<br>管理“网站生命”网站启动、关闭、重启，都由 Tomcat 管</p><h3 id="npm-命令"><a href="#npm-命令" class="headerlink" title="npm 命令"></a>npm 命令</h3><p>npm run build &#x3D; 把“开发时的源代码”变成“用户真正看到的网页”，就像把厨房半成品变成端上桌的硬菜。<br>npm run dev &#x3D; 开发专用“实时预览 + 调试”模式，菜还没正式上桌，但厨师可以随时尝咸淡。</p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>🧠 基本概念<br>概念含义<br>线程池（ThreadPool）提前准备好的几个“工作线程”<br>任务（Task）你要执行的函数，比如 get_data()<br>Future表示“将来”会返回结果的对象，你可以等待它完成<br>submit()提交一个任务给线程池<br>map()批量处理多个任务，像 map() 函数一样<br>with … as自动关闭线程池资源的推荐写法<br>🧪 示例代码（带中文注释）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor, as_completed<br></code></pre></td></tr></table></figure><h3 id="假设这是你要并行执行的函数"><a href="#假设这是你要并行执行的函数" class="headerlink" title="假设这是你要并行执行的函数"></a>假设这是你要并行执行的函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_data</span>(<span class="hljs-params">name, wait=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[<span class="hljs-subst">&#123;name&#125;</span>] 开始执行任务，预计耗时 <span class="hljs-subst">&#123;wait&#125;</span> 秒&quot;</span>)<br>    time.sleep(wait)  <span class="hljs-comment"># 模拟 I/O 操作（比如请求网页）</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[<span class="hljs-subst">&#123;name&#125;</span>] 完成任务&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> 的数据&quot;</span><br></code></pre></td></tr></table></figure><h3 id="主程序开始"><a href="#主程序开始" class="headerlink" title="主程序开始"></a>主程序开始</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 创建一个线程池，最多同时执行 3 个任务</span><br>    <span class="hljs-keyword">with</span> ThreadPoolExecutor(max_workers=<span class="hljs-number">3</span>) <span class="hljs-keyword">as</span> executor:<br>        <span class="hljs-comment"># 提交多个任务给线程池执行</span><br>        futures = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>            <span class="hljs-comment"># submit(函数, 参数1, 参数2, ...)</span><br>            future = executor.submit(fetch_data, <span class="hljs-string">f&quot;任务<span class="hljs-subst">&#123;i+<span class="hljs-number">1</span>&#125;</span>&quot;</span>, wait=i % <span class="hljs-number">3</span> + <span class="hljs-number">1</span>)<br>            futures.append(future)<br><br>        <span class="hljs-comment"># 等待所有任务完成（异步）</span><br>        <span class="hljs-keyword">for</span> future <span class="hljs-keyword">in</span> as_completed(futures):<br>            result = future.result()  <span class="hljs-comment"># 获取返回值（阻塞直到完成）</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[主程序] 收到结果：<span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>🧠 学习小笔记（建议记下来）<br>✅ ThreadPoolExecutor(max_workers&#x3D;N)N 是最多同时运行几个任务（线程数）<br>✅ submit(func, *args)异步执行函数，立即返回 Future<br>✅ as_completed(futures)按任务完成顺序返回结果<br>✅ .result()获取函数运行完后的返回值<br>❗ 适合 I&#x2F;O 密集型任务比如网络请求、数据库查询、文件操作<br>❌ 不适合 CPU 密集型如训练模型、数学计算 → 请用多进程</p><h2 id="模块与脚本"><a href="#模块与脚本" class="headerlink" title="模块与脚本"></a>模块与脚本</h2><p>✅ 模块（module）和脚本（script）的区别<br>特性模块（Module）脚本（Script）<br>定义一个可以被导入和复用的 Python 文件一个可以直接运行的 Python 文件<br>用途提供功能、函数、类供其他代码调用执行某个特定任务或程序流程<br>入口点没有主入口，供其他文件使用通常有 if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘<br>导入方式import mymodule不能被别的脚本导入（如果它只是用来执行）<br>重复使用性高，可复用通常低，更专注执行任务<br>举例math.py, utils.py（定义函数供别人用）<br>Peewee ORM 示例<br>模型转字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseModel</span>(<span class="hljs-title class_ inherited__">Model</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">to_dict</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.__dict__[<span class="hljs-string">&#x27;__data__&#x27;</span>]  <span class="hljs-comment"># 直接访问对象内部字典属性</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">to_human_model_dict</span>(<span class="hljs-params">self, only_primary_with: <span class="hljs-built_in">list</span> = <span class="hljs-literal">None</span></span>):<br>        model_dict = <span class="hljs-variable language_">self</span>.__dict__[<span class="hljs-string">&#x27;__data__&#x27;</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> only_primary_with:<br>            <span class="hljs-keyword">return</span> &#123;remove_field_name_prefix(k): v <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> model_dict.items()&#125;<br>        human_model_dict = &#123;&#125;<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>._meta.primary_key.field_names:<br>            human_model_dict[remove_field_name_prefix(k)] = model_dict[k]<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> only_primary_with:<br>            human_model_dict[k] = model_dict[<span class="hljs-string">f&#x27;f_<span class="hljs-subst">&#123;k&#125;</span>&#x27;</span>]<br>        <span class="hljs-keyword">return</span> human_model_dict<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">meta</span>(<span class="hljs-params">self</span>) -&gt; Metadata:<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._meta<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_primary_keys_name</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-keyword">return</span> cls._meta.primary_key.field_names <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(cls._meta.primary_key, CompositeKey) <span class="hljs-keyword">else</span> [cls._meta.primary_key.name]<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getter_by</span>(<span class="hljs-params">cls, attr</span>):<br>        <span class="hljs-keyword">return</span> operator.attrgetter(attr)(cls)<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">cls, reverse=<span class="hljs-literal">None</span>, order_by=<span class="hljs-literal">None</span>, **kwargs</span>):<br>        filters = []<br>        <span class="hljs-keyword">for</span> f_n, f_v <span class="hljs-keyword">in</span> kwargs.items():<br>            attr_name = <span class="hljs-string">&#x27;%s&#x27;</span> % f_n<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(cls, attr_name) <span class="hljs-keyword">or</span> f_v <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(f_v) <span class="hljs-keyword">in</span> &#123;<span class="hljs-built_in">list</span>, <span class="hljs-built_in">set</span>&#125;:<br>                f_v = <span class="hljs-built_in">list</span>(f_v)<br>                <span class="hljs-keyword">if</span> is_continuous_field(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">getattr</span>(cls, attr_name))):<br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(f_v) == <span class="hljs-number">2</span>:<br>                        <span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(f_v):<br>                            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(v, <span class="hljs-built_in">str</span>) <span class="hljs-keyword">and</span> f_n <span class="hljs-keyword">in</span> auto_date_timestamp_field():<br>                                f_v[i] = utils.date_string_to_timestamp(v)<br>                        lt_value = f_v[<span class="hljs-number">0</span>]<br>                        gt_value = f_v[<span class="hljs-number">1</span>]<br>                        <span class="hljs-keyword">if</span> lt_value <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> gt_value <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                            filters.append(cls.getter_by(attr_name).between(lt_value, gt_value))<br>                        <span class="hljs-keyword">elif</span> lt_value <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                            filters.append(operator.attrgetter(attr_name)(cls) &gt;= lt_value)<br>                        <span class="hljs-keyword">elif</span> gt_value <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                            filters.append(operator.attrgetter(attr_name)(cls) &lt;= gt_value)<br>                <span class="hljs-keyword">else</span>:<br>                    filters.append(operator.attrgetter(attr_name)(cls) &lt;&lt; f_v)<br>            <span class="hljs-keyword">else</span>:<br>                filters.append(operator.attrgetter(attr_name)(cls) == f_v)<br>        <span class="hljs-keyword">if</span> filters:<br>            query_records = cls.select().where(*filters)<br>            <span class="hljs-keyword">if</span> reverse <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> order_by <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(cls, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;order_by&#125;</span>&quot;</span>):<br>                    order_by = <span class="hljs-string">&quot;create_time&quot;</span><br>                <span class="hljs-keyword">if</span> reverse <span class="hljs-keyword">is</span> <span class="hljs-literal">True</span>:<br>                    query_records = query_records.order_by(cls.getter_by(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;order_by&#125;</span>&quot;</span>).desc())<br>                <span class="hljs-keyword">elif</span> reverse <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>:<br>                    query_records = query_records.order_by(cls.getter_by(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;order_by&#125;</span>&quot;</span>).asc())<br>            <span class="hljs-keyword">return</span> [query_record <span class="hljs-keyword">for</span> query_record <span class="hljs-keyword">in</span> query_records]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> []<br></code></pre></td></tr></table></figure><h2 id="Peewee-基础"><a href="#Peewee-基础" class="headerlink" title="Peewee 基础"></a>Peewee 基础</h2><ul><li>Peewee 是一个轻量级的 ORM（对象关系映射）框架，ORM 的核心思想就是用 Python 类来表示数据库表。在定义模型类时，Meta 就是 Peewee 提供的一种机制，告诉 ORM 框架这个类在数据库中应该怎么表现。</li></ul><p>过滤器<br>.startswith(prefix)：搜索以前缀开头的值</p><p>.endswith(suffix)：搜索以后缀结尾的值</p><p>.regexp(exp)：正则表达式匹配（区分大小写）</p><p>.iregexp(exp)：正则表达式匹配（不区分大小写）</p><p>.cast(type)：将列的值转换为给定类型</p><p>Utils 工具目录<br>在一个项目里，utils（utilities） 文件或目录并不是官方规范，而是约定俗成的“工具箱”。它的核心定位是：放置那些与业务逻辑解耦、可在多处复用、与框架&#x2F;库无关的通用代码。</p><h2 id="logger"><a href="#logger" class="headerlink" title="&#x2F;logger&#x2F;"></a>&#x2F;<em>logger</em>&#x2F;</h2><p><code>只有当「Logger 设置的级别」≤「日志级别」时，才会输出。</code></p><table><thead><tr><th>Logger 设置的级别</th><th>会打印的级别</th><th>不会打印的级别</th></tr></thead><tbody><tr><td>DEBUG</td><td>DEBUG、INFO、WARNING、ERROR、CRITICAL</td><td>无</td></tr><tr><td>INFO</td><td>INFO、WARNING、ERROR、CRITICAL</td><td>DEBUG</td></tr><tr><td>WARNING</td><td>WARNING、ERROR、CRITICAL</td><td>DEBUG、INFO</td></tr><tr><td>ERROR</td><td>ERROR、CRITICAL</td><td>DEBUG、INFO、WARNING</td></tr><tr><td>CRITICAL</td><td>CRITICAL</td><td>DEBUG、INFO、WARNING、ERROR</td></tr></tbody></table><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>&#x2F;<em>Python 解释器（python.exe）和第三方包（site-packages）理解成“两个独立文件夹”：</em>&#x2F;</p><ul><li>解释器：只负责把 .py 文件翻译成机器指令并执行。</li><li>第三方包：被 pip install 下来的库（requests、torch、ragflow 依赖等）默认放在<br>…Python310\Lib\site-packages<br><code>解释器启动时，会把 当前虚拟环境的 site-packages 加到 sys.path，于是就能 import 到它们。</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生成器</title>
    <link href="/2025/08/13/%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <url>/2025/08/13/%E7%94%9F%E6%88%90%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="生成器函数和生成器对象的区别"><a href="#生成器函数和生成器对象的区别" class="headerlink" title="生成器函数和生成器对象的区别"></a>生成器函数和生成器对象的区别</h2><p>生成器函数被调用时，并不会立即执行函数体，而是返回一个生成器对象。只有在<strong>迭代生成器对象</strong>时，代码才会一步步执行。</p><hr><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Generator started&quot;</span>)<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yielded 1, continue...&quot;</span>)<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yielded 2, finish&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Calling gen()...&quot;</span>)<br>g = gen()  <span class="hljs-comment"># 创建生成器对象，不执行函数体</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Generator object created:&quot;</span>, g)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Calling next(g)...&quot;</span>)<br>val1 = <span class="hljs-built_in">next</span>(g)  <span class="hljs-comment"># 执行到第一个 yield</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Received:&quot;</span>, val1)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Calling next(g) again...&quot;</span>)<br>val2 = <span class="hljs-built_in">next</span>(g)  <span class="hljs-comment"># 执行到第二个 yield</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Received:&quot;</span>, val2)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Calling next(g) final time...&quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    val3 = <span class="hljs-built_in">next</span>(g)  <span class="hljs-comment"># 执行剩余代码，结束</span><br><span class="hljs-keyword">except</span> StopIteration:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Generator exhausted&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done.&quot;</span>)<br></code></pre></td></tr></table></figure><p>运行结果<br>Calling gen()…<br>Generator object created: &lt;generator object gen at 0x…&gt;<br>Calling next(g)…<br>Generator started<br>Received: 1<br>Calling next(g) again…<br>Yielded 1, continue…<br>Received: 2<br>Calling next(g) final time…<br>Yielded 2, finish<br>Generator exhausted<br>Done.</p><p>术语解释<br>迭代器驱动<br>迭代器不会自己执行，需要外部调用 next() 或使用 for 循环来“驱动”它。</p><p>每次调用 next()，代码会从上一次 yield 后的位置继续运行，直到遇到下一个 yield 或结束。</p><p>next()<br>Python 内置函数，等价于调用迭代器的 <strong>next</strong>() 方法。</p><p>功能：运行生成器到下一个 yield，返回其后的值。</p><p>当没有更多值时，会抛出 StopIteration 异常。</p><p>callable(obj)<br>Python 内置函数，用于判断对象 obj 是否可调用。</p><p>可调用对象包括：函数、方法，或者实现了 <strong>call</strong>() 方法的类实例。</p><p>callable(res) 的应用场景<br>在某些代码（如 res &#x3D; self._run()）中：<br>场景res 类型callable(res)处理方式<br>普通组件字符串、字典、DataFrame…False直接记录耗时<br>流式组件生成器函数、functools.partialTrue再调用一次获取生成器，开始迭代</p><p>为什么不能立即记录耗时？<br>如果 res 是生成器函数，还没开始迭代就记录结束时间，会导致耗时被严重低估，无法反映真实执行时间。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>生成器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/08/01/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/08/01/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><img src="/./%E5%A3%81%E7%BA%B8.jpg" alt="壁纸"></p><img src="/2025/08/01/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/%E5%A3%81%E7%BA%B8.jpg" class="">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/08/01/hello-world/"/>
    <url>/2025/08/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>bs4</title>
    <link href="/2025/08/01/bs4/"/>
    <url>/2025/08/01/bs4/</url>
    
    <content type="html"><![CDATA[<p><em><strong>爬虫</strong></em>*</p><ul><li>发送 HTTP 请求：爬虫通过 HTTP 请求从目标网站获取 HTML 页面，常用的库包括 requests。</li><li>解析 HTML 内容：获取 HTML 页面后，爬虫需要解析内容并提取数据，常用的库有 BeautifulSoup、lxml、Scrapy 等。</li><li>提取数据：通过定位 HTML 元素（如标签、属性、类名等）来提取所需的数据。</li><li>存储数据：将提取的数据存储到数据库、CSV 文件、JSON 文件等格式中，以便后续使用或分析。</li></ul><p><code>页面里的一个标签，就是一个元素。</code></p><table><thead><tr><th>你在 HTML 里写的</th><th>浏览器里的称呼</th><th>举例</th></tr></thead><tbody><tr><td><code>&lt;div&gt;</code></td><td>div 元素</td><td>一个容器块</td></tr><tr><td><code>&lt;img src=&quot;…&quot;&gt;</code></td><td>img 元素</td><td>一张图片</td></tr><tr><td><code>&lt;button&gt;</code></td><td>button 元素</td><td>按钮</td></tr><tr><td><code>&lt;a href=&quot;…&quot;&gt;</code></td><td>a 元素</td><td>超链接</td></tr><tr><td><code>&lt;span&gt;</code></td><td>span 元素</td><td>行内文本</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br>    <span class="hljs-comment"># 读取示例 HTML 文件</span><br>html = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">    &lt;head&gt;</span><br><span class="hljs-string">        &lt;title&gt;Example Page&lt;/title&gt;</span><br><span class="hljs-string">    &lt;/head&gt;</span><br><span class="hljs-string">    &lt;body&gt;</span><br><span class="hljs-string">        &lt;h1&gt;Hello, World!&lt;/h1&gt;</span><br><span class="hljs-string">    &lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 创建 BeautifulSoup 对象，并指定解析器为 lxml</span><br>soup = BeautifulSoup(html, <span class="hljs-string">&#x27;lxml&#x27;</span>)<br>    <span class="hljs-comment"># 找到第一个 h1 标签，并输出其文本内容</span><br>h1 = soup.find(<span class="hljs-string">&#x27;h1&#x27;</span>)<br><span class="hljs-built_in">print</span>(h1.text)<br></code></pre></td></tr></table></figure><h3 id="可以使用-BeautifulSoup-对象-soup-来提取其中的数据。例如，要获取文档标题，可以使用-title-属性"><a href="#可以使用-BeautifulSoup-对象-soup-来提取其中的数据。例如，要获取文档标题，可以使用-title-属性" class="headerlink" title="可以使用 BeautifulSoup 对象 soup 来提取其中的数据。例如，要获取文档标题，可以使用 title 属性"></a>可以使用 BeautifulSoup 对象 soup 来提取其中的数据。例如，要获取文档标题，可以使用 title 属性</h3><p>print(soup.title)<br>    # <title>Example Page</title>   </p><h3 id="要获取标签的文本内容，可以使用-text-属性或-string-属性："><a href="#要获取标签的文本内容，可以使用-text-属性或-string-属性：" class="headerlink" title="要获取标签的文本内容，可以使用 text 属性或 string 属性："></a>要获取标签的文本内容，可以使用 text 属性或 string 属性：</h3><p>print(soup.h1.text)</p><h3 id="要获取标签的属性，可以使用-attrs-属性："><a href="#要获取标签的属性，可以使用-attrs-属性：" class="headerlink" title="要获取标签的属性，可以使用 attrs 属性："></a>要获取标签的属性，可以使用 attrs 属性：</h3><p>1.Tag(标签)<br>print(soup.a.attrs[‘href’])<br>(1)每个tag都有自己的名字，通过.name来获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">soup = BeautifulSoup(<span class="hljs-string">&#x27;&lt;a&gt;recall&lt;/a&gt;&#x27;</span>, features=<span class="hljs-string">&#x27;lxml&#x27;</span>)<br><span class="hljs-built_in">print</span>(soup.a)<br><span class="hljs-comment">#&lt;a&gt;liyuhong&lt;/a&gt;</span><br><span class="hljs-built_in">print</span>(soup.a.name)<br><span class="hljs-comment">#a</span><br></code></pre></td></tr></table></figure><p>(2)一个tag可能有多个属性，操作与字典相同，通过.attrs来获取。</p><p>2.NavigableString(标签的值)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">soup = BeautifulSoup(<span class="hljs-string">&#x27;&lt;a class=&quot;celebrity liyuhong&quot;&gt;li&lt;/a&gt;&#x27;</span>, features=<span class="hljs-string">&#x27;lxml&#x27;</span>)<br><span class="hljs-built_in">print</span>(soup.a.string)<br><span class="hljs-comment">#li</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(soup.a.string))<br><span class="hljs-comment">#&lt;class &#x27;bs4.element.NavigableString&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="要获取所有符合条件的标签，可以使用-find-all-方法："><a href="#要获取所有符合条件的标签，可以使用-find-all-方法：" class="headerlink" title="要获取所有符合条件的标签，可以使用 find_all 方法："></a>要获取所有符合条件的标签，可以使用 find_all 方法：</h3><h1 id="获取所有-p-标签"><a href="#获取所有-p-标签" class="headerlink" title="获取所有 p 标签"></a>获取所有 p 标签</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">ps = soup.find_all(<span class="hljs-string">&#x27;p&#x27;</span>)<br><span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> ps:<br>    <span class="hljs-built_in">print</span>(p.text)<br>    <span class="hljs-comment">#    This is the first paragraph.</span><br>    <span class="hljs-comment"># This is the second paragraph.</span><br>    <span class="hljs-comment"># 获取 class 为 &quot;second&quot; 的 p 标签</span><br>    p = soup.find(<span class="hljs-string">&#x27;p&#x27;</span>, &#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;second&#x27;</span>&#125;)<br><span class="hljs-built_in">print</span>(p.text)<br>    <span class="hljs-comment"># This is the second paragraph.</span><br></code></pre></td></tr></table></figure><h3 id="BeautifulSoup-支持使用-CSS-选择器来查找标签，可以使用-select-方法"><a href="#BeautifulSoup-支持使用-CSS-选择器来查找标签，可以使用-select-方法" class="headerlink" title="BeautifulSoup 支持使用 CSS 选择器来查找标签，可以使用 select 方法"></a>BeautifulSoup 支持使用 CSS 选择器来查找标签，可以使用 select 方法</h3><p><code>返回列表。类似CSS写法来筛选元素，标签名不加任何修饰，类名加点，id名加#</code></p><ol><li>通过标签名查找</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">soup.select(<span class="hljs-string">&#x27;a&#x27;</span>)<br>soup.select(<span class="hljs-string">&#x27;a, span&#x27;</span>) <span class="hljs-comment"># 注意引号的位置</span><br></code></pre></td></tr></table></figure><p>2.通过类名查找<br>soup.select(‘.class’)</p><p>3.通过id名查找<br>soup.select(‘#id’)</p><ol start="4"><li>通过子标签查找</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pthon"># 直接子元素(必须相邻)<br>soup.select(&#x27;body &gt; div &gt;a&#x27;)<br># 间接子元素(不需相邻)<br>soup.select(&#x27;body a&#x27;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Scrapy</title>
    <link href="/2025/08/01/Scrapy/"/>
    <url>/2025/08/01/Scrapy/</url>
    
    <content type="html"><![CDATA[<h2 id="scrapy简介"><a href="#scrapy简介" class="headerlink" title="scrapy简介"></a>scrapy简介</h2><ul><li>Engine：引擎，处理整个系统的数据流和事件，是整个框架的核心，</li><li>Item： 它是一个抽象的数据结构，它定义了爬取结果的数据结构，爬取的数据会被赋值成 Item 对象。每个 Item 就是一个类，类里面定义了爬取结果的数据字段</li><li>Scheduler： 调度器，它用来接受 Engine 发过来的 Request 并将其加入队列中，同时也可以将 Request 发回给 Engine 供 Downloader 执行，它主要维护 Request 的调度逻辑，比如先进先出、先进后出、优先级进出等等。</li><li>Spiders： 每个 Spider 里面定义了站点的爬取逻辑和页面的解析规则，它主要负责解析响应并生成 Item 和新的请求然后发给 Engine 进行处理。</li><li>Downloader： 下载器，即完成 向服务器发送请求，然后拿到响应 的过程，得到的响应会再发送给 Engine 处理。</li><li>Item Pipelines： 项目管道，这也是一个复数统称，可以对应多个 Item Pipeline。Item Pipeline 主要负责处理由 Spider 从页面中抽取的 Item，做一些数据清洗、验证和存储等工作，比如将 Item 的某些字段进行规整，将 Item 存储到数据库等操作都可以由 Item Pipeline 来完成。</li><li>Downloader Middlewares： 图中 Engine 和 Downloader 之间的方块部分，中文可以称为下载器中间件，同样也是复数统称，其包含多个 Downloader Middleware，它是位于 Engine 和 Downloader 之间的 Hook 框架，负责实现 Downloader 和 Engine 之间的请求和响应的处理过程。</li><li>Spider Middlewares： 图中 Engine 和 Spiders 之间的方块部分，中文可以称为蜘蛛中间件，它是位于 Engine 和 Spiders 之间的 Hook 框架，负责实现 Spiders 和 Engine 之间的 Item，请求和响应的处理过程</li></ul><h2 id="项目运行过程"><a href="#项目运行过程" class="headerlink" title="项目运行过程"></a>项目运行过程</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p><code>scrapy startproject tutorial</code><br>这将创建一个名为 tutorial 的目录，其内容如下<br>tutorial&#x2F;<br>    scrapy.cfg            # deploy configuration file</p><pre><code class="hljs">tutorial/             # project&#39;s Python module, you&#39;ll import your code from here    __init__.py    items.py          # project items definition file    middlewares.py    # project middlewares file    pipelines.py      # project pipelines file    settings.py       # project settings file    spiders/          # a directory where you&#39;ll later put your spiders        __init__.py</code></pre><h3 id="我们的第一个-Spider"><a href="#我们的第一个-Spider" class="headerlink" title="我们的第一个 Spider"></a>我们的第一个 Spider</h3><p>Spider 是您定义的类，Scrapy 使用它们从网站（或一组网站）抓取信息。它们必须继承自Spider，并定义初始请求，以及（可选地）如何跟踪页面中的链接和解析下载的页面内容以提取数据。</p><p>这是我们第一个 Spider 的代码。将其保存在项目目录 tutorial&#x2F;spiders 下名为 quotes_spider.py 的文件中</p><p><code>scrapy genspider sina news.sina.com.cn</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-keyword">import</span> scrapy<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">QuotesSpider</span>(scrapy.Spider):<br>    name = <span class="hljs-string">&quot;quotes&quot;</span><br><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">self</span>):<br>        urls = [<br>            <span class="hljs-string">&quot;https://quotes.toscrape.com/page/1/&quot;</span>,<br>            <span class="hljs-string">&quot;https://quotes.toscrape.com/page/2/&quot;</span>,<br>        ]<br>        <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:<br>            <span class="hljs-keyword">yield</span> scrapy.Request(url=url, callback=<span class="hljs-variable language_">self</span>.parse)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>        page = response.url.split(<span class="hljs-string">&quot;/&quot;</span>)[-<span class="hljs-number">2</span>]<br>        filename = <span class="hljs-string">f&quot;quotes-<span class="hljs-subst">&#123;page&#125;</span>.html&quot;</span><br>        Path(filename).write_bytes(response.body)<br>        <span class="hljs-variable language_">self</span>.log(<span class="hljs-string">f&quot;Saved file <span class="hljs-subst">&#123;filename&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>name：用于标识 Spider。它在项目内必须是唯一的，也就是说，您不能为不同的 Spider 设置相同的名称。<br>start()：必须是一个异步生成器，用于产生供 spider 开始抓取的请求（以及可选的 item）。后续请求将从这些初始请求中连续生成。<br>parse()：一个将被调用的方法，用于处理每个请求下载的响应。response 参数是TextResponse 的一个实例，它包含页面内容并具有其他有用的方法来处理它。</p><h3 id="如何运行我们的-spider"><a href="#如何运行我们的-spider" class="headerlink" title="如何运行我们的 spider"></a>如何运行我们的 spider</h3><p>要运行我们的 spider，请进入项目的顶层目录并运行<br><code>scrapy crawl quotes</code></p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bs4</title>
    <link href="/2025/08/01/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/FastApi/"/>
    <url>/2025/08/01/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/FastApi/</url>
    
    <content type="html"><![CDATA[<h1 id="FastAPI"><a href="#FastAPI" class="headerlink" title="FastAPI"></a>FastAPI</h1><p><code>FastAPI 是一个用 Python 写 RESTful API 的“现代化、飞快的框架”，帮你几行代码就搭好一个高性能的 Web 接口。</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI<br>app = FastAPI()<br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">root</span>():<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Hello World&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h1 id="并发-async-await"><a href="#并发-async-await" class="headerlink" title="并发 async &#x2F; await"></a>并发 async &#x2F; await</h1><ul><li>如果你正在使用第三方库，它们会告诉你使用 await 关键字来调用它们，就像这样：<br><code>results = await some_library()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_results</span>():<br>    results = <span class="hljs-keyword">await</span> some_library()<br>    <span class="hljs-keyword">return</span> results<br></code></pre></td></tr></table></figure><p><strong>你只能在被 async def 创建的函数内使用 await</strong></p>]]></content>
    
    
    <categories>
      
      <category>Python框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Playwright</title>
    <link href="/2025/08/01/playwright/"/>
    <url>/2025/08/01/playwright/</url>
    
    <content type="html"><![CDATA[<h1 id="Playwright"><a href="#Playwright" class="headerlink" title="Playwright"></a>Playwright</h1><p>*** 框架对比***</p><table><thead><tr><th>需求维度</th><th>推荐工具</th></tr></thead><tbody><tr><td>纯静态&#x2F;海量列表</td><td>Scrapy</td></tr><tr><td>少量动态页面</td><td>Playwright 直接脚本</td></tr><tr><td>大规模+少量 JS</td><td>Scrapy + scrapy-playwright</td></tr><tr><td>复杂人机交互</td><td>Playwright&#x2F;Selenium</td></tr><tr><td>必须 IE 兼容</td><td>Selenium</td></tr></tbody></table><ul><li>两者如何混合——“Scrapy 管调度，Playwright 管渲染”<br>• scrapy-playwright：官方插件，把 Playwright 作为 Scrapy 的下载器。</li><li>优点：<br>– 继续享受 Scrapy 的调度&#x2F;去重&#x2F;管道；<br>– 只有真正需要 JS 的请求才走 Playwright，其他仍走高速 HTTP。</li></ul><p><code>Playwright = 一个可以“自动化任何现代浏览器”（Chromium、Firefox、WebKit）的跨语言库，用它写出来的脚本能像真人一样打开网页、点击、输入、滚动、截图、下文件、抓接口、跑单测、生成 PDF/视频——速度快、稳定性高、反爬绕过能力强。</code></p><p>1️⃣ <code>inner_text</code>基本用法: 获取某个元素「可见文本」的API</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ptthon">text = await page.inner_text(selector) #selector：CSS/XPath 选择器，定位目标元素。<br></code></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>是否只取可见文本</th><th>是否包含隐藏元素文本</th></tr></thead><tbody><tr><td><code>inner_text()</code></td><td>✅ 只取可见</td><td>❌ 不包含</td></tr><tr><td><code>text_content()</code></td><td>❌ 取所有（包括 <code>display:none</code>）</td><td>✅ 包含</td></tr></tbody></table><p>2️⃣ <code>query_selector </code> 根据 CSS&#x2F;XPath 选择器，返回第一个匹配的元素句柄（ElementHandle），找不到就返回 None。</p><table><thead><tr><th>方法</th><th>返回</th></tr></thead><tbody><tr><td><code>query_selector</code></td><td>第一个匹配元素（ElementHandle 或 None）</td></tr><tr><td><code>query_selector_all</code></td><td><strong>列表</strong> <code>[ElementHandle, …]</code>，空列表 <code>[]</code></td></tr></tbody></table><p>3️⃣ <code>get_attribute</code> 把 HTML 标签里的 属性&#x3D;”值” 取出来。</p><table><thead><tr><th>方法</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>get_attribute</code></td><td>取 <strong>标签属性值</strong></td><td><code>&lt;a href=&quot;x&quot;&gt;</code> → <code>&quot;x&quot;</code></td></tr><tr><td><code>inner_text</code> &#x2F; <code>text_content</code></td><td>取 <strong>元素内部可见文本</strong></td><td><code>&lt;a href=&quot;x&quot;&gt;点我&lt;/a&gt;</code> → <code>&quot;点我&quot;</code></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> async_playwright() <span class="hljs-keyword">as</span> p: <span class="hljs-comment">#Playwright 的“启动写法</span><br>    browser = <span class="hljs-keyword">await</span> p.chromium.launch(<br>                            headless=<span class="hljs-literal">True</span>,  <span class="hljs-comment"># 无界面运行，省资源。</span><br>                            args=[<br>                                <span class="hljs-string">&#x27;--disable-gpu&#x27;</span>,<br>                                <span class="hljs-string">&#x27;--disable-dev-shm-usage&#x27;</span>,<br>                                <span class="hljs-string">&#x27;--no-sandbox&#x27;</span>,<br>                                <span class="hljs-string">&#x27;--disable-blink-features=AutomationControlled&#x27;</span>,    <span class="hljs-comment">#去掉 navigator.webdriver=true 等自动化特征，降低被反爬识别概率。</span><br>                                <span class="hljs-string">&#x27;--disable-features=IsolateOrigins,site-per-process&#x27;</span>,<br>                                <span class="hljs-string">&#x27;--disable-site-isolation-trials&#x27;</span><br>                            ],<br>                            proxy=playwright_proxy<br>                        )<br>    iphone = p.devices[<span class="hljs-string">&quot;iPhone 12&quot;</span>] <span class="hljs-comment"># Playwright 自带的「iPhone 12」设备配置（含视口、UA、触控等）。</span><br>                    <span class="hljs-comment">#创建一个新的浏览器上下文（Context），相当于一个独立的浏览器环境（类似于一个新的窗口或用户）。</span><br>                    context = <span class="hljs-keyword">await</span> browser.new_context(<br>                        **iphone,<br>                        extra_http_headers=&#123;<br>                            <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;https://mp.weixin.qq.com/&quot;</span>,<br>                            <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 MicroMessenger/8.0.42(0x18002a2e) NetType/WIFI Language/zh_CN&quot;</span>,<br>                            <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span>,<br>                            <span class="hljs-string">&quot;Accept-Language&quot;</span>: <span class="hljs-string">&quot;zh-CN,zh;q=0.9,en;q=0.8&quot;</span>,<br>                            <span class="hljs-string">&quot;Accept-Encoding&quot;</span>: <span class="hljs-string">&quot;gzip, deflate, br&quot;</span>,<br>                            <span class="hljs-string">&quot;Connection&quot;</span>: <span class="hljs-string">&quot;keep-alive&quot;</span>,<br>                            <span class="hljs-string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>                            <span class="hljs-string">&quot;Sec-Fetch-Dest&quot;</span>: <span class="hljs-string">&quot;document&quot;</span>,<br>                            <span class="hljs-string">&quot;Sec-Fetch-Mode&quot;</span>: <span class="hljs-string">&quot;navigate&quot;</span>,<br>                            <span class="hljs-string">&quot;Sec-Fetch-Site&quot;</span>: <span class="hljs-string">&quot;same-origin&quot;</span>,<br>                            <span class="hljs-string">&quot;Sec-Fetch-User&quot;</span>: <span class="hljs-string">&quot;?1&quot;</span>,<br>                            <span class="hljs-string">&quot;Cache-Control&quot;</span>: <span class="hljs-string">&quot;max-age=0&quot;</span><br>                        &#125;<br>                    )<br>                    <span class="hljs-comment"># 每个新页面加载前注入自定义 JavaScript 脚本。</span><br>                    <span class="hljs-keyword">await</span> context.add_init_script(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">                        Object.defineProperty(navigator, &#x27;webdriver&#x27;, &#123;</span><br><span class="hljs-string">                            get: () =&gt; undefined</span><br><span class="hljs-string">                        &#125;);</span><br><span class="hljs-string">                        Object.defineProperty(navigator, &#x27;plugins&#x27;, &#123;</span><br><span class="hljs-string">                            get: () =&gt; [1, 2, 3, 4, 5]</span><br><span class="hljs-string">                        &#125;);</span><br><span class="hljs-string">                        Object.defineProperty(navigator, &#x27;languages&#x27;, &#123;</span><br><span class="hljs-string">                            get: () =&gt; [&#x27;zh-CN&#x27;, &#x27;zh&#x27;]</span><br><span class="hljs-string">                        &#125;);</span><br><span class="hljs-string">                    &quot;&quot;&quot;</span>)<br>                    <span class="hljs-comment"># 创建页面并访问 同一个上下文下的页面共享 Cookie、存储等环境</span><br>                    page = <span class="hljs-keyword">await</span> context.new_page()<br>                     <span class="hljs-keyword">try</span>:<br>                        logger.info(<span class="hljs-string">f&quot;[PDF] 开始访问URL: <span class="hljs-subst">&#123;url&#125;</span>&quot;</span>)<br>                        <span class="hljs-comment"># wait_until=等待页面网络空闲（即没有新的网络请求），通常表示页面和资源加载完成。</span><br>                        <span class="hljs-keyword">await</span> page.goto(url, wait_until=<span class="hljs-string">&quot;networkidle&quot;</span>, timeout=<span class="hljs-number">10000</span>)<br>                        logger.info(<span class="hljs-string">&quot;[PDF] 页面加载完成&quot;</span>)<br>                        <span class="hljs-keyword">try</span>:<br>                            body_text = <span class="hljs-keyword">await</span> page.inner_text(<span class="hljs-string">&#x27;body&#x27;</span>)<br>                        <span class="hljs-keyword">except</span> Exception:<br>                            body_text = <span class="hljs-string">&quot;&quot;</span><br>                        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;安全验证&quot;</span> <span class="hljs-keyword">in</span> body_text <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;网络超时&quot;</span> <span class="hljs-keyword">in</span> body_text <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;网络不给力&quot;</span> <span class="hljs-keyword">in</span> body_text:<br>                            logger.warning(<span class="hljs-string">&quot;[PDF] 检测到安全验证或网络超时提示，移除当前代理并重试&quot;</span>)<br>                            <span class="hljs-keyword">if</span> proxy:<br>                                proxy_pool.remove_proxy(proxy)<br>                            <span class="hljs-keyword">continue</span><br>                        error_text = <span class="hljs-keyword">await</span> page.query_selector(<span class="hljs-string">&quot;div.weui-msg__title&quot;</span>)<br>                        <span class="hljs-keyword">if</span> error_text:<br>                            error_content = <span class="hljs-keyword">await</span> error_text.inner_text()<br>                            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;环境异常&quot;</span> <span class="hljs-keyword">in</span> error_content:<br>                                <span class="hljs-keyword">if</span> proxy:<br>                                    logger.warning(<span class="hljs-string">f&quot;[PDF] 检测到环境异常，移除代理: <span class="hljs-subst">&#123;proxy&#125;</span>&quot;</span>)<br>                                    proxy_pool.remove_proxy(proxy)<br>                                <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;微信环境检测异常，已移除当前代理，请稍后重试&quot;</span>)<br>                        title = <span class="hljs-keyword">await</span> page.title()<br>                        meta_img = <span class="hljs-keyword">await</span> page.query_selector(<span class="hljs-string">&quot;meta[property=&#x27;og:image&#x27;]&quot;</span>)<br>                        <span class="hljs-keyword">if</span> meta_img:<br>                            cover_image_url = <span class="hljs-keyword">await</span> meta_img.get_attribute(<span class="hljs-string">&quot;content&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XPath</title>
    <link href="/2025/08/01/XPath/"/>
    <url>/2025/08/01/XPath/</url>
    
    <content type="html"><![CDATA[<h2 id="Xpath解析"><a href="#Xpath解析" class="headerlink" title="Xpath解析"></a>Xpath解析</h2><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有子节点。</td></tr><tr><td>&#x2F;</td><td>从根节点选取（取子节点）。</td></tr><tr><td>&#x2F;&#x2F;</td><td>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置（取子孙节点）。</td></tr><tr><td>.</td><td>选取当前节点。</td></tr><tr><td>..</td><td>选取当前节点的父节点。</td></tr><tr><td>@</td><td>选取属性。</td></tr></tbody></table><ul><li>1️⃣选择所有节点：<br><code>使用双斜杠//选择文档中的所有节点，例如：//node()</code></li><li>2️⃣按标签名选择节点：<br><code>使用标签名选择节点，例如：//book</code></li><li>3️⃣按属性选择节点：<br><code>使用方括号[]和@符号选择具有特定属性值的节点，例如：//book[@category=&quot;children&quot;]</code></li><li>4️⃣选择父节点、子节点和兄弟节点：<br><code>使用父节点(…)、子节点(/)和兄弟节点(//)选择节点</code></li><li>5️⃣  8️⃣ 9️⃣ 🔟使用通配符选择节点：<br><code>使用星号*选择任何节点，例如：//book/*选择所有book节点的子节点</code></li><li>6️⃣使用逻辑运算符选择节点：<br><code>使用and、or、not等逻辑运算符选择节点，例如：//book[price&lt;10 and @category=&quot;children&quot;]</code></li><li>7️⃣使用内置函数处理节点：<br><code>使用内置函数处理节点的文本和数值，例如：//book[substring(title,1,3)=&quot;The&quot;]选择标题以&quot;The&quot;开头的书籍</code></li></ul><h2 id="路径表达式"><a href="#路径表达式" class="headerlink" title="路径表达式"></a>路径表达式</h2><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>bookstore</td><td>选取 bookstore 元素的所有子节点。</td></tr><tr><td>&#x2F;bookstore</td><td>选取根元素 bookstore。</td></tr><tr><td>bookstore&#x2F;book</td><td>选取属于 bookstore 的子元素的所有 book 元素。</td></tr><tr><td>&#x2F;&#x2F;book</td><td>选取所有 book 子元素，而不管它们在文档中的位置。</td></tr><tr><td>bookstore&#x2F;&#x2F;book</td><td>选取属于 bookstore 元素的后代的所有 book 元素，而不管它们的位置。</td></tr><tr><td>@lang</td><td>选取名为 lang 的所有属性。</td></tr></tbody></table><p><code>XPath路径表达式的基本语法如下：</code><br>&#x2F;                 : 定位到根节点<br>&#x2F;bookstore        : 定位到根节点下的bookstore节点<br>&#x2F;bookstore&#x2F;book   : 定位到bookstore节点下的所有book节点<br>&#x2F;&#x2F;book            : 递归查找所有book节点<br>&#x2F;&#x2F;book[@category&#x3D;’web’] : 查找所有category属性值为web的book节点</p><table><thead><tr><th>路径表达式</th><th>描述</th></tr></thead><tbody><tr><td>&#x2F;bookstore&#x2F;book[1]</td><td>选取属于 bookstore 子元素的第一个 book 元素。</td></tr><tr><td>&#x2F;bookstore&#x2F;book[last()]</td><td>选取属于 bookstore 子元素的最后一个 book 元素。</td></tr><tr><td>&#x2F;bookstore&#x2F;book[last()-1]</td><td>选取属于 bookstore 子元素的倒数第二个 book 元素。</td></tr><tr><td>&#x2F;bookstore&#x2F;book[position()&lt;3]</td><td>选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td></tr><tr><td>&#x2F;&#x2F;title[@lang$]</td><td>选取所有拥有名为 lang 的属性的 title 元素。</td></tr><tr><td>&#x2F;&#x2F;title[@lang&#x3D;’eng’]</td><td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td></tr><tr><td>&#x2F;bookstore&#x2F;book[price&gt;35.00]</td><td>选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td></tr><tr><td>&#x2F;bookstore&#x2F;book[price&gt;35.00]&#x2F;&#x2F;title</td><td>选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td></tr></tbody></table><h2 id="未知节点"><a href="#未知节点" class="headerlink" title="未知节点"></a>未知节点</h2><table><thead><tr><th>通配符&#x2F;路径表达式</th><th>描述</th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配任何元素节点。</td></tr><tr><td><code>@*</code></td><td>匹配任何属性节点。</td></tr><tr><td><code>/bookstore/*</code></td><td>选取 bookstore 元素的所有子元素。</td></tr><tr><td><code>//*</code></td><td>选取文档中的所有元素。</td></tr><tr><td><code>//title[@*]</code></td><td>选取所有带有属性的 title 元素。</td></tr></tbody></table><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a><em>实战</em></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">url = <span class="hljs-string">&#x27;https://www.douguo.com/&#x27;</span><br>res = requests.get(url)<br><span class="hljs-built_in">print</span>(res.text)<br>html = etree.HTML(res.text)<br><span class="hljs-comment"># /从根节点选取（取子节点）。</span><br>rest = html.xpath(<span class="hljs-string">&#x27;/html/head/title/text()&#x27;</span>)  <span class="hljs-comment"># 返回Element对象</span><br><span class="hljs-built_in">print</span>(rest)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># // 获取任何位置的数据，不从根路径出发</span><br>title_text = html.xpath(<span class="hljs-string">&#x27;//title/text()&#x27;</span>)  <span class="hljs-comment"># 一般会获取多个数据</span><br><span class="hljs-built_in">print</span>(title_text)<br></code></pre></td></tr></table></figure><p>html &#x3D; etree.HTML(res.text)<br>这行代码的作用是将 HTTP 响应中的 HTML 文本解析为一个 Element 对象，以便后续对其进行操作，例如提取数据、修改内容、查找元素等等。其中，etree 是 Python 的一个第三方库，可以用来解析 XML 和 HTML 文本。HTML 是一种标记语言，用于构建网页和 Web 应用程序的用户界面。<br>我们在使用的时候，需要导入，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-keyword">from</span> tabulate <span class="hljs-keyword">import</span> tabulate<br>url = <span class="hljs-string">&#x27;https://www.douguo.com/&#x27;</span><br>res = requests.get(url)<br><span class="hljs-built_in">print</span>(res.text)<br><span class="hljs-comment"># html = etree.HTML(res.text)</span><br>html = etree.HTML(res.text)<br>name = html.xpath(<span class="hljs-string">f&#x27;//*[@id=&quot;content&quot;]/ul[1]/li[1]/div/a/text()&#x27;</span>)<br><span class="hljs-built_in">print</span>(name)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask</title>
    <link href="/2025/08/01/Flask%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0_hexo_cleaned/"/>
    <url>/2025/08/01/Flask%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0_hexo_cleaned/</url>
    
    <content type="html"><![CDATA[<p><strong>Flask</strong></p><h1 id="一、-简介"><a href="#一、-简介" class="headerlink" title="一、 简介"></a>一、 简介</h1><p>Flask是一个非常小的PythonWeb框架，被称为微型框架；只提供了一个稳健的核心，其他功能全部是通过扩展实现的</p><h1 id="二、-概要"><a href="#二、-概要" class="headerlink" title="二、 概要"></a>二、 概要</h1><p>1）安装： pip install flask<br>2）组成：WSGI系统、调试、路由<br>3）模板引擎：Jinja2（由Flask核心开发者人员开发）<br>4）使用到装饰器：以@开头的代码方法</p><h1 id="三、-知识点（附代码）"><a href="#三、-知识点（附代码）" class="headerlink" title="三、 知识点（附代码）"></a>三、 知识点（附代码）</h1><h2 id="1-Flask基础入门"><a href="#1-Flask基础入门" class="headerlink" title="1. Flask基础入门"></a>1. Flask基础入门</h2><h3 id="1）路由route的创建："><a href="#1）路由route的创建：" class="headerlink" title="1）路由route的创建："></a>1）路由route的创建：</h3><p>methods&#x3D;[]支持的请求方式参数设置，不设置默认为GET<br>  @app.route(‘&#x2F;login’, methods&#x3D;[‘GET’, ‘PoSt’])  # 请求参数设置不区分大小写，源码中自动进行了upper<br>  def login():  ✅ 访问 &#x2F;login 这个地址时：<br>🔹 如果是 GET 请求（比如你在浏览器地址栏输入 &#x2F;login）就返回一个 login.html 页面（登录表单页面）<br>      if request.method &#x3D;&#x3D; ‘GET’:<br>          return render_template(‘login.html’)<br>    🔹 如果是 POST 请求（比如你在表单里点“登录”按钮提交）：从表单里取出两个字段：<br>      elif request.method &#x3D;&#x3D; ‘POST’:<br>          username &#x3D; request.form.get(‘username’)<br>          pwd &#x3D; request.form.get(‘pwd’)<br>          🔹如果用户名是 yang 且密码是 123456：<br>          if username &#x3D;&#x3D; ‘yang’ and pwd &#x3D;&#x3D; ‘123456’:<br>          🔹把用户名存到 session（表示用户已登录）<br>              session[‘username’] &#x3D; username<br>              return ‘login successed 200  ok!’<br>          else:<br>             return ‘login failed!!!’</p><p>🔹视图函数：✅ 一句话解释<br>视图函数（view function）就是 Flask 中“处理某个 URL 请求并返回响应”的 Python 函数。它相当于 MVC 里的 C（Controller）+V（View） 的结合体：接收请求 → 做业务逻辑 → 把结果（HTML&#x2F;JSON&#x2F;文本）返回</p><p>url_map.convertersFlask 的转换器注册表，把自己的转换器“挂”进去<br>&lt;re(…)&gt;路由里的尖括号表达式，用来捕获并转换 URL 片段<br>✅ 第 2 步：我们想干啥？让路由支持正则表达式匹配！<br>✅ 第 3 步：写个“手机验证”转换器<br>class RegexConverter(BaseConverter):<br>    def <strong>init</strong>(self, url_map, regex):<br>        super().<strong>init</strong>(url_map)   # 先让父类干活<br>        self.regex &#x3D; regex          # 把我们传的正则保存起来<br>    def to_python(self, value):<br>        print(‘to_python被调用，拿到值：’, value)<br>        return value                # 原样返回即可<br><strong>init</strong>：Flask 会把路由里写的正则自动塞给你（regex 参数）。<br>to_python：Flask 每捕获一次，就调用它，你可以做额外处理（这里只是打印）。<br>✅ 第 4 步：把转换器“挂”到 Flask 上<br>app.url_map.converters[‘re’] &#x3D; RegexConverter    app你创建的 Flask 应用<br>现在可以用 &lt;re(…)&gt; 这种语法了！<br>✅ 第 5 步：用转换器写路由<br>@app.route(“&#x2F;index&#x2F;&lt;re(‘1\d{10}’):value&gt;”)<br>def index(value):<br>    print(‘视图函数收到的 value：’, value)<br>    return “Hello World!<br>‘1\d{10}’ 是正则：以 1 开头、后面 10 位数字 → 11 位手机号。<br>&lt;re(…)&gt; 里的 re 就是刚才注册的转换器。<br>捕获到的字符串会经 to_python 处理后，传给 index(value)。</p><h3 id="2）endpoint的作用"><a href="#2）endpoint的作用" class="headerlink" title="2）endpoint的作用"></a>2）endpoint的作用</h3><p>🔹说明：每个app中都存在一个url_map，这个url_map中包含了url到endpoint的映射；<br>🔹作用：当request请求传来一个url的时候，会在url_map中先通过rule找到endpoint，然后再在view_functions中根据endpoint再找到对应的视图函数view_func</p><p>自定义装饰器装饰多个视图函数时，如果在路由中没有指定唯一的endpoint,<br> 则所有装饰的视图函数返回的都是装饰器中的inner函数，同名因此会报错<br> def decorator(f):<br>    def inner(*args, **kwargs):<br>        return f(*args, **kwargs)<br>    return inner          # ← 所有被装饰的函数最终都叫 inner</p><p>@app.route(‘&#x2F;a’)<br>@decorator<br>def a():                  # 实际注册的是 inner<br>    return ‘a’</p><p>@app.route(‘&#x2F;b’)<br>@decorator<br>def b():                  # 又注册一个 inner → 同名冲突！<br>    return ‘b’</p><h3 id="3）request对象的使用"><a href="#3）request对象的使用" class="headerlink" title="3）request对象的使用"></a>3）request对象的使用</h3><p>render_template()：可以用于呈现一个我们编写的html文件模板</p><h3 id="4）请求钩子before-after-request"><a href="#4）请求钩子before-after-request" class="headerlink" title="4）请求钩子before&#x2F;after_request"></a>4）请求钩子before&#x2F;after_request</h3><p>🔹想要在正常执行的代码的前、中、后时期，强行执行一段我们想要执行的功能代码，便要用到钩子函数——用特定装饰器装饰的函数。<br>1.before_request：在每一次请求之前调用；执行顺序是先绑定的先执行；<br>2.after_request：每一次请求之后都会调用；执行的顺序是先绑定的后执行；</p><h3 id="5）redirect重定向"><a href="#5）redirect重定向" class="headerlink" title="5）redirect重定向"></a>5）redirect重定向</h3><p>🔹在flask 中，重定向是通过flask.redirect(location, code&#x3D;302)这个函数来实现的，location表示需要重定向的url, 应该配合url_for函数来使用， code表示采用哪个重定向，默认是302，即临时性重定向, 可以修改为301来实现永性重定向；</p><h3 id="6）返回json数据给前端"><a href="#6）返回json数据给前端" class="headerlink" title="6）返回json数据给前端"></a>6）返回json数据给前端</h3><p>1.使用：make_response方法和json库共同完成<br>response &#x3D; make_response(json.dumps(data,ensure_ascii&#x3D;False))<br>   response.mimetype &#x3D; ‘application&#x2F;json’<br>   return response<br>2.使用：jsonify库实现，减少代码行数</p><h3 id="7）abort函数的使用"><a href="#7）abort函数的使用" class="headerlink" title="7）abort函数的使用"></a>7）abort函数的使用</h3><p>🔹使用类似于python中的raise函数，可以在需要退出请求的地方抛出错误，并结束该请求；可以使用errorhandler()装饰器来进行异常的捕获与自定义：</p><h3 id="8）url-for实现反转"><a href="#8）url-for实现反转" class="headerlink" title="8）url_for实现反转"></a>8）url_for实现反转</h3><p>🔹视图函数 → \rightarrow →url；</p><h2 id="2-Flask高级视图"><a href="#2-Flask高级视图" class="headerlink" title="2. Flask高级视图"></a>2. Flask高级视图</h2><h3 id="1）add-url-rule的初登场"><a href="#1）add-url-rule的初登场" class="headerlink" title="1）add_url_rule的初登场"></a>1）add_url_rule的初登场</h3><p>实现url与视图函数的绑定，除了使用路由装饰器@app.route,  add_url_rule(rule,endpoint&#x3D;None,view_func&#x3D;None)</p><h3 id="2）类视图的引入"><a href="#2）类视图的引入" class="headerlink" title="2）类视图的引入"></a>2）类视图的引入</h3><p>🔹 定义的视图都是通过函数来实现的,所以称之为视图函数,但其实视图还可以由类来实现，即类视图；<br>🔹标准类视图：<br>        定义时需要继承flask的views.View这一基类;<br>        每个类视图内必须包含一个dispatch_request方法，每当类视图接收到请求时都会执行该方法，返回值的设定和视图函数相同；<br>        视图函数可以通过@app.route和app.add_url_rule来进行注册（映射到url），但类视图只能通过app.add_url_rule来注册，注册时view_func不能直接使用类名，需要调用基类中的as_view方法来为自己取一个“视图函数名”<br>from flask import Flask,render_template,views<br>app &#x3D; Flask(<strong>name</strong>)</p><h1 id="定义父视图类继承基类View"><a href="#定义父视图类继承基类View" class="headerlink" title="定义父视图类继承基类View"></a>定义父视图类继承基类View</h1><p>class Ads(views.View):<br>    def <strong>init</strong>(self):<br>        super(Ads, self).<strong>init</strong>()<br>        # 实例属性<br>        self.context&#x3D;{<br>            ‘ads’:’这是对联广告！’<br>        }</p><h1 id="定义子视图类继承父类并实现工程"><a href="#定义子视图类继承父类并实现工程" class="headerlink" title="定义子视图类继承父类并实现工程"></a>定义子视图类继承父类并实现工程</h1><p>class Index(Ads):<br>    def dispatch_request(self):<br>        # 字典传参方式&#x3D;&#x3D;不定长的关键字传参<br>        return render_template(‘class_mould&#x2F;index.html’,**self.context)<br>class Login(Ads):<br>    def dispatch_request(self):<br>        # 字典传参方式&#x3D;&#x3D;不定长的关键字传参<br>        return render_template(‘class_mould&#x2F;login.html’,**self.context)<br>class Register(Ads):<br>    def dispatch_request(self):<br>        # 字典传参方式&#x3D;&#x3D;不定长的关键字传参<br>        return render_template(‘class_mould&#x2F;register.html’,**self.context)</p><h1 id="注册我们创建的类视图-as-view给类视图起名"><a href="#注册我们创建的类视图-as-view给类视图起名" class="headerlink" title="注册我们创建的类视图,as_view给类视图起名"></a>注册我们创建的类视图,as_view给类视图起名</h1><p>app.add_url_rule(rule&#x3D;’&#x2F;‘,endpoint&#x3D;’index’,view_func&#x3D;Index.as_view(‘index’))<br>app.add_url_rule(rule&#x3D;’&#x2F;login&#x2F;‘,endpoint&#x3D;’login’,view_func&#x3D;Login.as_view(‘login’))<br>app.add_url_rule(rule&#x3D;’&#x2F;register&#x2F;‘,endpoint&#x3D;’register’,view_func&#x3D;Register.as_view(‘register’))</p><p>if <strong>name</strong>&#x3D;&#x3D;’<strong>main</strong>‘:<br>    print(app.view_functions)<br>    app.run(debug&#x3D;True)</p><h3 id="3）装饰器的自定义与使用"><a href="#3）装饰器的自定义与使用" class="headerlink" title="3）装饰器的自定义与使用"></a>3）装饰器的自定义与使用</h3><h3 id="4）蓝图的使用"><a href="#4）蓝图的使用" class="headerlink" title="4）蓝图的使用"></a>4）蓝图的使用</h3><p>当接收到请求时，Flask会遍历Flask对象下（已注册）的各蓝图对象，比对蓝图对象中记录的url，比对成功则映射到该url绑定的视图函数并返回响应<br>📌 举个例子（不用蓝图 vs 用蓝图）<br>❌ 不用蓝图：所有代码写在一个文件<br>from flask import Flask<br>app &#x3D; Flask(<strong>name</strong>)<br>@app.route(‘&#x2F;‘)<br>def home():<br>    return ‘Home’<br>@app.route(‘&#x2F;admin’)<br>def admin():<br>    return ‘Admin’<br>if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘:<br>    app.run()<br>✅ 用蓝图：按模块拆分</p><h1 id="文件：admin-routes-py"><a href="#文件：admin-routes-py" class="headerlink" title="文件：admin&#x2F;routes.py"></a>文件：admin&#x2F;routes.py</h1><p>from flask import Blueprint<br>admin_bp &#x3D; Blueprint(‘admin’, <strong>name</strong>, url_prefix&#x3D;’&#x2F;admin’)</p><p>@admin_bp.route(‘&#x2F;‘)<br>def admin_home():<br>    return ‘Admin Home’</p><h1 id="文件：main-py"><a href="#文件：main-py" class="headerlink" title="文件：main.py"></a>文件：main.py</h1><p>from flask import Flask<br>from admin.routes import admin_bp</p><p>app &#x3D; Flask(<strong>name</strong>)<br>app.register_blueprint(admin_bp)</p><p>if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘:<br>    app.run()</p><h3 id="5）url-prefix设置蓝图前缀"><a href="#5）url-prefix设置蓝图前缀" class="headerlink" title="5）url_prefix设置蓝图前缀"></a>5）url_prefix设置蓝图前缀</h3><p>蓝图对象定义时添加，为当前蓝图下的所有视图函数添加统一的前缀<br>new_list &#x3D; Blueprint(‘news’,<strong>name</strong>,url_prefix&#x3D;’&#x2F;index’)<br>@new_list.route(‘&#x2F;news’)<br>def new():<br>    return ‘这是新闻模块！’<br>此外，在主路由中注册蓝图时也可以为蓝图添加前缀，并且此次添加会覆写蓝图对象创建时添加的前缀；<br>如下例中，注册后的新闻模块的url又变为了”&#x2F;test&#x2F;news”：<br>app.register_blueprint(news.new_list,url_prefix&#x3D;’&#x2F;test’)</p><h3 id="6）subdomain设置蓝图子域名"><a href="#6）subdomain设置蓝图子域名" class="headerlink" title="6）subdomain设置蓝图子域名"></a>6）subdomain设置蓝图子域名</h3><p>通过修改Flask对象的配置,为我们的网站设置域名,用字段为’SERVER_NAME’,为该域名指定端口号：</p><h1 id="当前网站域名设置为example-com，端口号为5000"><a href="#当前网站域名设置为example-com，端口号为5000" class="headerlink" title="当前网站域名设置为example.com，端口号为5000"></a>当前网站域名设置为example.com，端口号为5000</h1><pre><code class="hljs">app.config[&#39;SERVER_NAME&#39;] = &#39;example.com:5000&#39;</code></pre><p>修改位于 C:\Windows\System32\drivers\etc 下的域名重定向文件 hosts<br>📌设置子域名:在蓝图文件admin.py中注册蓝图对象，添加subdomain&#x3D;’admin’即为该蓝图设置子域名admin；<br>再在hosts文件中添加记录：10.240.142.216 admin.example<br>📌再在hosts文件中添加记录：10.240.142.216 admin.example.com后，我们便可以通过域名：<a href="http://admin.example.com:5000/ad%E6%9D%A5%E8%AE%BF%E9%97%AE%E8%AF%A5%E8%93%9D%E5%9B%BE%EF%BC%88%E4%B8%8B%E4%B8%80%E7%BA%A7%E5%9F%9F%E5%90%8D%E5%9C%A8%E4%B8%8A%E4%B8%80%E7%BA%A7%E5%B7%A6%E4%BE%A7%EF%BC%89%EF%BC%9B">http://admin.example.com:5000/ad来访问该蓝图（下一级域名在上一级左侧）；</a><br>        from flask import Blueprint<br>        bp &#x3D; Blueprint(‘admin’,<strong>name</strong>,subdomain &#x3D; ‘admin’)<br>        @bp.route(‘&#x2F;ad’)<br>        def admin():<br>            return ‘Admin Page’</p><h2 id="3-jinja2模板引擎"><a href="#3-jinja2模板引擎" class="headerlink" title="3.jinja2模板引擎"></a>3.jinja2模板引擎</h2><h3 id="1）模板的导入与使用"><a href="#1）模板的导入与使用" class="headerlink" title="1）模板的导入与使用"></a>1）模板的导入与使用</h3><pre><code class="hljs">Flask通过render_template来实现模板的渲染。要导入from flask     import rander_template，模板中注释需放在中</code></pre><h3 id="2）模板中的控制语句"><a href="#2）模板中的控制语句" class="headerlink" title="2）模板中的控制语句"></a>2）模板中的控制语句</h3><pre><code class="hljs">jinja2模板引擎中也可使用if和for控制语句，但是语句需要放置在&#123;% %&#125;中；if条件判断语句必须包含结束标签&#123;% endif %&#125;，其他部分与python中类似，可以与比较运算符&gt; &gt;= &lt; &lt;= == !=结合使用，或与逻辑运算符and,or,not,()结合使用；</code></pre><h3 id="3）过滤器的使用与自定义"><a href="#3）过滤器的使用与自定义" class="headerlink" title="3）过滤器的使用与自定义"></a>3）过滤器的使用与自定义</h3><p>&lt;— 自定义过滤器 —&gt;<br>def list_step(li):<br>    # 返回列表，步长为2<br>    return li[::2]</p><pre><code class="hljs"># 注册模板过滤器（filter）# 参数1为该过滤器调用的函数参数2为在前端中调用该过滤器使用的名称</code></pre><p>app.add_template_filter(list_step,’li2’)</p><p>可以在前端模板内  <!-- 原为 Jinja2 过滤器语法，已移除过滤器部分 -->的” | “后使用；</p><h2 id="4-Flask数据交互"><a href="#4-Flask数据交互" class="headerlink" title="4.Flask数据交互"></a>4.Flask数据交互</h2><h3 id="4）Cookie的使用"><a href="#4）Cookie的使用" class="headerlink" title="4）Cookie的使用"></a>4）Cookie的使用</h3><p>📌 在网站中，http请求是呈无序状态的<br>无序状态是指协议对于事务处理没有记忆能力，同一个服务器上你新打开的网页和之前打开的网页之间没有任何联系，你的当前请求和上一次请求究竟是不是一个用户发出的，服务器也无从得知；</p><p>Cookie一般通过Response对象的set_cookie()方法来设置<br>    # 前两个参数必须设置，后续参数则为可选参数<br>set_cookie(key,value[,max_age,expires,path,domain,secure,httponly,samesite])<br>key(或name)必需项，规定cookie的名称，字符串<br>value必需项，规定cookie的内容，字符串</p><p>除此之外，我们也可以通过修改响应对象Response的表单头headers来设置cookie：<br>@app.route(‘&#x2F;h’)<br>def set_cookie_h():<br>    resp &#x3D; Response(“设置Cookie！”)<br>    # 通过添加表头的键值对来实现cookie设置<br>    # 第一项为key&#x3D;value，需要同时设置这两个参数，后续项则用分号分隔<br>    resp.headers[‘Set-Cookie’] &#x3D; “ testname &#x3D; lisi; Expires &#x3D; SUN,01-Nov-2021 05:10:12 GMT; Max-Age&#x3D;3600; path&#x3D;&#x2F; “<br>    return resp</p>]]></content>
    
    
    <categories>
      
      <category>Flask</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Web开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
